diff -burN fontconfig-2.12.1.orig/fontconfig/fontconfig.h fontconfig-2.12.1/fontconfig/fontconfig.h
--- fontconfig-2.12.1.orig/fontconfig/fontconfig.h	2016-08-05 07:47:02.000000000 +0200
+++ fontconfig-2.12.1/fontconfig/fontconfig.h	2016-10-10 16:15:26.000000000 +0200
@@ -988,6 +988,22 @@
 	    int		    *nchar,
 	    int		    *wchar);
 
+#ifdef _WIN32
+/* Convert a Utf-8 encoded string to Utf-16. Caller must free oStr with free when done*/
+FcPublic FcBool
+FcUtf8_to_Utf16 (const char* iStr, wchar_t** oStr);
+
+/* Convert a Utf-16 encoded string to Utf-8. Caller must free oStr with free when done*/
+FcPublic FcBool
+FcUtf16_to_Utf8 (const wchar_t* iStr, char** oStr);
+
+/* Returns a UTF-8 encoded string equivalent of what GetModuleFileNameW(...) would return.
+   Caller must free with free the result when done
+*/
+FcPublic FcChar8 *
+FcGetModuleFilenameWrapper(void* handle);
+#endif
+
 FcPublic FcChar8 *
 FcStrDirname (const FcChar8 *file);
 
diff -burN fontconfig-2.12.1.orig/src/fcatomic.c fontconfig-2.12.1/src/fcatomic.c
--- fontconfig-2.12.1.orig/src/fcatomic.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcatomic.c	2016-10-11 14:47:58.000000000 +0200
@@ -56,7 +56,7 @@
 
 #ifdef _WIN32
 #include <direct.h>
-#define mkdir(path,mode) _mkdir(path)
+#define mkdir(path,mode) _wmkdir(path)
 #endif
 
 #define NEW_NAME	".NEW"
@@ -140,9 +140,20 @@
 	no_link = FcTrue;
     }
     (void) unlink ((char *) atomic->tmp);
+#else // !HAVE_LINK
+#ifdef _WIN32
+	{
+		wchar_t* wideLck;
+		if (!FcUtf8_to_Utf16((const char*)atomic->lck, &wideLck)) {
+			return FcFalse;
+		}
+		ret = _wmkdir (wideLck) == 0 && _wchmod(wideLck, 0600) == 0;
+		free(wideLck);
+	}
 #else
     ret = mkdir ((char *) atomic->lck, 0600);
 #endif
+#endif // HAVE_LINK
     if (ret < 0)
     {
 	/*
@@ -156,7 +167,7 @@
 	    time_t  now = time (0);
 	    if ((long int) (now - lck_stat.st_mtime) > 10 * 60)
 	    {
-#ifdef HAVE_LINK
+		#ifdef HAVE_LINK
 		if (no_link)
 		{
 		    if (rmdir ((char *) atomic->lck) == 0)
@@ -167,15 +178,40 @@
 		    if (unlink ((char *) atomic->lck) == 0)
 			return FcAtomicLock (atomic);
 		}
-#else
-		if (rmdir ((char *) atomic->lck) == 0)
+		#else // !HAVE_LINK
+		
+				int rmdirret = 0;
+	#ifdef _WIN32
+				{
+					wchar_t* wideLck;
+					if (!FcUtf8_to_Utf16((const char*)atomic->lck, &wideLck)) {
+						return FcFalse;
+					}
+					rmdirret = _wrmdir(wideLck);
+					free(wideLck);
+					wideLck = 0;
+				}
+	#else
+				rmdirret = rmdir ((char *) atomic->lck);
+	#endif
+				if (rmdirret == 0)
 		    return FcAtomicLock (atomic);
-#endif
+	#endif // HAVE_LINK
 	    }
+		} // ret < 0
+		return FcFalse;
 	}
+
+#ifdef _WIN32
+	wchar_t* wideNew;
+	if (!FcUtf8_to_Utf16((const char*)atomic->new, &wideNew)) {
 	return FcFalse;
     }
-    (void) unlink ((char *) atomic->new);
+	_wunlink (wideNew);
+	free(wideNew);
+#else
+    unlink ((char *) atomic->new);
+#endif
     return FcTrue;
 }
 
@@ -195,17 +231,43 @@
 FcAtomicReplaceOrig (FcAtomic *atomic)
 {
 #ifdef _WIN32
-    unlink ((const char *) atomic->file);
-#endif
+	wchar_t* wideFile;
+	wchar_t* wideNew;
+	if (!FcUtf8_to_Utf16((const char*)atomic->file, &wideFile)) {
+		return FcFalse;
+	}
+	if (!FcUtf8_to_Utf16((const char*)atomic->new, &wideNew)) {
+		free(wideFile);
+		return FcFalse;
+	}
+    _wunlink (wideFile);
+	
+	int ok = _wrename (wideNew, wideFile) >= 0;
+	
+	free(wideNew);
+	free(wideFile);
+	return ok;
+#else
     if (rename ((char *) atomic->new, (char *) atomic->file) < 0)
 	return FcFalse;
     return FcTrue;
+#endif
+   
 }
 
 void
 FcAtomicDeleteNew (FcAtomic *atomic)
 {
+#ifdef _WIN32
+	wchar_t* wideNew;
+	if (!FcUtf8_to_Utf16((const char*)atomic->new, &wideNew)) {
+		return;
+	}
+	_wunlink (wideNew);
+	free(wideNew);
+#else
     unlink ((char *) atomic->new);
+#endif
 }
 
 void
@@ -215,8 +277,17 @@
     if (unlink ((char *) atomic->lck) == -1)
 	rmdir ((char *) atomic->lck);
 #else
+#ifdef _WIN32
+	wchar_t* wideLck;
+	if (!FcUtf8_to_Utf16((const char*)atomic->lck, &wideLck)) {
+		return;
+	}
+	_wrmdir(wideLck);
+	free(wideLck);
+#else
     rmdir ((char *) atomic->lck);
 #endif
+#endif
 }
 
 void
diff -burN fontconfig-2.12.1.orig/src/fccfg.c fontconfig-2.12.1/src/fccfg.c
--- fontconfig-2.12.1.orig/src/fccfg.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fccfg.c	2016-10-11 16:41:32.000000000 +0200
@@ -1856,12 +1856,14 @@
 	 LPVOID    lpvReserved)
 {
   FcChar8 *p;
-
+  FcChar8* filename;
   switch (fdwReason) {
   case DLL_PROCESS_ATTACH:
-      if (!GetModuleFileName ((HMODULE) hinstDLL, (LPCH) fontconfig_path,
-			      sizeof (fontconfig_path)))
+	  filename = FcGetModuleFilenameWrapper((void*) hinstDLL);
+      if (!filename)
 	  break;
+	  strncpy((char*)fontconfig_path, (const char*)filename, strlen((const char*)filename));
+	  free(filename);
 
       /* If the fontconfig DLL is in a "bin" or "lib" subfolder,
        * assume it's a Unix-style installation tree, and use
@@ -1899,6 +1901,66 @@
 #define FONTCONFIG_FILE	"fonts.conf"
 #endif
 
+#ifdef _WIN32
+FcBool
+FcUtf8_to_Utf16 (const char* iStr, wchar_t** oStr)
+{
+	if (!iStr || !oStr) {
+		return (FcBool)0;
+	}
+	int nChars, iLen;
+    nChars = MultiByteToWideChar(CP_UTF8, 0, iStr, -1, NULL, 0) - 1;
+	iLen = strlen(iStr);
+	*oStr = (wchar_t*)malloc(nChars * sizeof(wchar_t));
+	if (!*oStr) {
+		return (FcBool)0;
+	}
+    MultiByteToWideChar ( CP_UTF8, 0, iStr, iLen, *oStr, nChars );
+    return (FcBool)1;
+}
+
+FcBool
+FcUtf16_to_Utf8 (const wchar_t* iStr, char** oStr)
+{
+	if (!iStr || !oStr) {
+		return (FcBool)0;
+	}
+	int nChars;
+    nChars = WideCharToMultiByte(CP_UTF8, 0, iStr, -1, NULL, 0, NULL, NULL) + 1;
+	*oStr = (char*)malloc(nChars * sizeof(char));
+	if (!*oStr) {
+		return (FcBool)0;
+	}
+    WideCharToMultiByte (CP_UTF8, 0, iStr, -1, *oStr, nChars, NULL, NULL);
+    return (FcBool)1;
+}
+
+FcChar8*
+FcGetModuleFilenameWrapper(void* handle)
+{
+		// We do MAX_PATH + 2 here, and request with MAX_PATH + 1, so we can handle all paths
+		// up to, and including MAX_PATH size perfectly fine with string termination, as well
+		// as easily detect if the file path is indeed larger than MAX_PATH, in which case we
+		// need to use the heap instead. This is a work-around, since contrary to what the
+		// MSDN documentation states, GetModuleFileName sometimes doesn't set the
+		// ERROR_INSUFFICIENT_BUFFER error number, and we thus cannot rely on this value if
+		// GetModuleFileName(0, buffer, MAX_PATH) == MAX_PATH.
+		// GetModuleFileName(0, buffer, MAX_PATH + 1) == MAX_PATH just means we hit the normal
+		// file path limit, and we handle it normally, if the result is MAX_PATH + 1, we use
+		// heap (even if the result _might_ be exactly MAX_PATH + 1, but that's ok).
+		 wchar_t buffer[MAX_PATH + 2];
+		 DWORD v = GetModuleFileNameW((HMODULE)handle, buffer, MAX_PATH + 1);
+		 if (v == 0) {
+			return (FcChar8*)0;
+		 }
+		 char* out;
+		 if (!FcUtf16_to_Utf8(buffer, &out)) {
+			return (FcChar8*)0;
+		 }
+		 return (FcChar8*)out;
+}
+#endif
+
 static FcChar8 *
 FcConfigFileExists (const FcChar8 *dir, const FcChar8 *file)
 {
@@ -1922,12 +1984,19 @@
     strcpy ((char *) path, (const char *) dir);
     /* make sure there's a single separator */
 #ifdef _WIN32
-    if ((!path[0] || (path[strlen((char *) path)-1] != '/' &&
-		      path[strlen((char *) path)-1] != '\\')) &&
-	!(file[0] == '/' ||
-	  file[0] == '\\' ||
-	  (isalpha (file[0]) && file[1] == ':' && (file[2] == '/' || file[2] == '\\'))))
+	{
+	 /* make sure all separators are backslashes*/
+	 int i;
+	 int nChars = strlen((char*)path);
+	 for (i = 0; i < nChars; ++i) {
+		if (path[i] == '/') {
+			path[i] = '\\';
+		}
+		if (i == nChars -1 && path[i] != '\\') {
 	strcat ((char *) path, "\\");
+		}
+	 }
+	}
 #else
     if ((!path[0] || path[strlen((char *) path)-1] != '/') && file[0] != '/')
 	strcat ((char *) path, "/");
@@ -1936,8 +2005,19 @@
 #endif
     strcat ((char *) path, (char *) file);
 
+#ifdef _WIN32
+	wchar_t* widePath;
+	if (!FcUtf8_to_Utf16((const char*)path, &widePath)) {
+		return 0;
+	}
+	int accessRet = _waccess (widePath, R_OK);
+	free(widePath);
+	if (!accessRet) 
+	return path;
+#else
     if (access ((char *) path, R_OK) == 0)
 	return path;
+#endif
 
     FcStrFree (path);
 
@@ -1954,7 +2034,19 @@
     int	    i;
 
     npath = 2;	/* default dir + null */
+	FcBool mustFreeEnv = 0;
+#ifdef _WIN32
+	const DWORD buffSize = 65535;
+	wchar_t w_env[buffSize];
+	if (GetEnvironmentVariableW(L"FONTCONFIG_PATH", w_env, buffSize)) {
+		if (FcUtf16_to_Utf8(w_env, (char**)&env)) {
+			mustFreeEnv = 1;
+		}
+	}
+#else
     env = (FcChar8 *) getenv ("FONTCONFIG_PATH");
+#endif
+
     if (env)
     {
 	e = env;
@@ -1967,7 +2059,6 @@
     if (!path)
 	goto bail0;
     i = 0;
-
     if (env)
     {
 	e = env;
@@ -1992,13 +2083,22 @@
 #ifdef _WIN32
 	if (fontconfig_path[0] == '\0')
 	{
+		
 		char *p;
-		if(!GetModuleFileName(NULL, (LPCH) fontconfig_path, sizeof(fontconfig_path)))
+		FcChar8* filename = FcGetModuleFilenameWrapper(NULL);
+		if(!filename)
 			goto bail1;
+		strncpy((char*)fontconfig_path, (const char*)filename, strlen((const char*)filename));
+		free(filename);
 		p = strrchr ((const char *) fontconfig_path, '\\');
 		if (p) *p = '\0';
 		strcat ((char *) fontconfig_path, "\\fonts");
 	}
+	if (mustFreeEnv) {
+		free(env);
+		env = 0;
+		mustFreeEnv = 0;
+	}
 #endif
     dir = (FcChar8 *) FONTCONFIG_PATH;
     path[i] = malloc (strlen ((char *) dir) + 1);
@@ -2012,6 +2112,9 @@
 	free (path[i]);
     free (path);
 bail0:
+	if (mustFreeEnv) {
+		free(env);
+	}
     return 0;
 }
 
@@ -2032,13 +2135,25 @@
 {
     if (_FcConfigHomeEnabled)
     {
-        char *home = getenv ("HOME");
+		char *home;
+#ifndef _WIN32
+        home = getenv ("HOME");
+#else
 
-#ifdef _WIN32
-	if (home == NULL)
-	    home = getenv ("USERPROFILE");
+		static const DWORD buffSize = 65535;
+		wchar_t w_home[buffSize];
+		if (GetEnvironmentVariableW(L"HOME", w_home, buffSize)) {
+			if (!FcUtf16_to_Utf8(w_home, (char**)&home)) {
+				return 0;
+			}
+		} else {
+			if (GetEnvironmentVariableW(L"USERPROFILE", w_home, buffSize)) {
+				if (!FcUtf16_to_Utf8(w_home, (char**)&home)) {
+					return 0;
+				}
+			}
+		}
 #endif
-
 	return (FcChar8 *) home;
     }
     return 0;
@@ -2066,6 +2181,14 @@
 	    memcpy (&ret[len], FC_DIR_SEPARATOR_S ".cache", 7);
 	    ret[len + 7] = 0;
 	}
+#ifdef _WIN32
+	// on windows FcConfigHome converts from wide chars and 
+	// thus allocates a tmp string as return value that 
+	// the caller must free
+	if (home) {
+		free((void*)home);
+	}
+#endif
     }
 
     return ret;
@@ -2093,6 +2216,14 @@
 	    memcpy (&ret[len], FC_DIR_SEPARATOR_S ".config", 8);
 	    ret[len + 8] = 0;
 	}
+#ifdef _WIN32
+	// on windows FcConfigHome converts from wide chars and 
+	// thus allocates a tmp string as return value that 
+	// the caller must free
+	if (home) {
+		free((void*)home);
+	}
+#endif
     }
 
     return ret;
@@ -2112,7 +2243,6 @@
     {
 	const FcChar8 *home = FcConfigHome ();
 	size_t len = home ? strlen ((const char *)home) : 0;
-
 	ret = malloc (len + 13 + 1);
 	if (ret)
 	{
@@ -2120,6 +2250,14 @@
 	    memcpy (&ret[len], FC_DIR_SEPARATOR_S ".local" FC_DIR_SEPARATOR_S "share", 13);
 	    ret[len + 13] = 0;
 	}
+	#ifdef _WIN32
+	// on windows FcConfigHome converts from wide chars and 
+	// thus allocates a tmp string as return value that 
+	// the caller must free
+	if (home) {
+		free((void*)home);
+	}
+#endif
     }
 
     return ret;
@@ -2137,13 +2275,25 @@
 FcConfigFilename (const FcChar8 *url)
 {
     FcChar8    *file, *dir, **path, **p;
+	FcBool mustFreeEnv = 0;
 
     if (!url || !*url)
     {
+		#ifdef _WIN32
+			static const DWORD buffSize = 65535;
+			wchar_t w_env[buffSize];
+			if (GetEnvironmentVariableW(L"FONTCONFIG_FILE", w_env, buffSize)) {
+				if (FcUtf16_to_Utf8(w_env, (char**)&url)) {
+					mustFreeEnv = 1;
+				}
+			}
+		#else
 	url = (FcChar8 *) getenv ("FONTCONFIG_FILE");
+		#endif
 	if (!url)
 	    url = (FcChar8 *) FONTCONFIG_FILE;
     }
+
     file = 0;
 
 #ifdef _WIN32
@@ -2156,10 +2306,18 @@
     switch (*url) {
     case '~':
 	dir = FcConfigHome ();
-	if (dir)
+	if (dir) {
 	    file = FcConfigFileExists (dir, url + 1);
-	else
+#ifdef _WIN32
+		// on windows FcConfigHome converts from wide chars and 
+		// thus allocates a tmp string as return value that 
+		// the caller must free
+		free((void*)dir);
+		dir = 0;
+#endif
+	} else {
 	    file = 0;
+	}
 	break;
 #ifdef _WIN32
     case '\\':
@@ -2170,8 +2328,14 @@
 	break;
     default:
 	path = FcConfigGetPath ();
-	if (!path)
+	if (!path) {
+		if (mustFreeEnv) {
+			free((void*)url);
+			url = 0;
+			mustFreeEnv = 0;
+		}
 	    return NULL;
+	}
 	for (p = path; *p; p++)
 	{
 	    file = FcConfigFileExists (*p, url);
@@ -2181,7 +2345,10 @@
 	FcConfigFreePath (path);
 	break;
     }
-
+	if (mustFreeEnv) {
+		void* nonCstPtr = (void*)url;
+		free(nonCstPtr);
+	}
     return file;
 }
 
diff -burN fontconfig-2.12.1.orig/src/fccompat.c fontconfig-2.12.1/src/fccompat.c
--- fontconfig-2.12.1.orig/src/fccompat.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fccompat.c	2016-10-11 14:32:58.000000000 +0200
@@ -42,6 +42,10 @@
 #include <string.h>
 #include <time.h>
 
+#ifdef _WIN32
+#include <Share.h>
+#endif
+
 #ifdef O_CLOEXEC
 #define FC_O_CLOEXEC O_CLOEXEC
 #else
@@ -110,22 +114,29 @@
 {
     int fd = -1;
 
+	mode_t mode = (mode_t)0;
     if (flags & O_CREAT)
     {
 	va_list ap;
-	mode_t mode;
 
 	va_start(ap, flags);
 	mode = (mode_t) va_arg(ap, int);
 	va_end(ap);
 
-	fd = open(pathname, flags | FC_O_CLOEXEC | FC_O_LARGEFILE, mode);
     }
-    else
-    {
-	fd = open(pathname, flags | FC_O_CLOEXEC | FC_O_LARGEFILE);
+#ifdef _WIN32
+	wchar_t* widePath;
+	if (!FcUtf8_to_Utf16(pathname, &widePath)) {
+		return fd;
     }
-
+	errno_t errcode = _wsopen_s(&fd, widePath,  flags | FC_O_CLOEXEC | FC_O_LARGEFILE, _SH_DENYNO, mode);
+	free(widePath);
+	if (errcode != 0) {
+		return -1;
+	}
+#else
+	fd = open(pathname, flags | FC_O_CLOEXEC | FC_O_LARGEFILE, mode);
+#endif
     return fd;
 }
 
@@ -153,7 +164,13 @@
     }
 #  endif
 #elif HAVE__MKTEMP_S
-   if (_mktemp_s(template, strlen(template) + 1) != 0)
+   wchar_t* wideTemplate;
+   if (!FcUtf8_to_Utf16(template, &wideTemplate)) {
+		return fd;
+   }
+   errno_t err = _wmktemp(wideTemplate);
+   free(wideTemplate);
+   if (err != 0)
        return -1;
    fd = FcOpen(template, O_RDWR | O_EXCL | O_CREAT, 0600);
 #endif
@@ -246,12 +263,43 @@
     parent = FcStrDirname (dir);
     if (!parent)
 	return FcFalse;
+#ifdef _WIN32
+	wchar_t* wideParent;
+    if (!FcUtf8_to_Utf16((char *)parent, &wideParent)) {
+		return 0;
+	}
+	wchar_t* wideDir;
+	if (!FcUtf8_to_Utf16((const char *)dir, &wideDir)) {
+		free(wideParent);
+		return 0;
+	}
+	ret = FcFalse;
+	int accessRet = _waccess (wideParent, F_OK);
+	if (accessRet == -1) {
+		ret = FcMakeDirectory (parent);
+		if (ret) {
+			accessRet = 0;
+		}
+	}
+	if (accessRet == 0) {
+		ret = _wmkdir (wideDir) == 0;
+		if (ret) {
+			ret = _wchmod (wideDir, 0755) == 0;
+		}
+	}
+	
+	free(wideParent);
+	free(wideDir);
+#else
     if (access ((char *) parent, F_OK) == 0)
 	ret = mkdir ((char *) dir, 0755) == 0 && chmod ((char *) dir, 0755) == 0;
     else if (access ((char *) parent, F_OK) == -1)
 	ret = FcMakeDirectory (parent) && (mkdir ((char *) dir, 0755) == 0) && chmod ((char *) dir, 0755) == 0;
     else
 	ret = FcFalse;
+#endif
+    
+		
     FcStrFree (parent);
     return ret;
 }
diff -burN fontconfig-2.12.1.orig/src/fcdefault.c fontconfig-2.12.1/src/fcdefault.c
--- fontconfig-2.12.1.orig/src/fcdefault.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcdefault.c	2016-10-10 16:14:56.000000000 +0200
@@ -118,9 +118,11 @@
 #ifdef _WIN32
 	char buf[MAX_PATH+1];
 
-	/* TODO This is ASCII-only; fix it. */
-	if (GetModuleFileNameA (GetModuleHandle (NULL), buf, sizeof (buf) / sizeof (buf[0])) > 0)
+	FcChar8* filename = FcGetModuleFilenameWrapper(GetModuleHandle(NULL));
+	if (filename)
 	{
+		strncpy(buf, (const char*) filename, strlen((const char*)filename));
+		free(filename);
 	    char *p;
 	    unsigned int len;
 
diff -burN fontconfig-2.12.1.orig/src/fcdir.c fontconfig-2.12.1/src/fcdir.c
--- fontconfig-2.12.1.orig/src/fcdir.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcdir.c	2016-10-11 15:12:52.000000000 +0200
@@ -31,11 +31,27 @@
 FcBool
 FcFileIsDir (const FcChar8 *file)
 {
+#ifdef _WIN32
+	WIN32_FILE_ATTRIBUTE_DATA wfad;
+	wchar_t* wideFile;
+	
+	if (!FcUtf8_to_Utf16((const char*)file, &wideFile)) {
+		return -1;
+	}
+    if (!GetFileAttributesExW (wideFile, GetFileExInfoStandard, &wfad)) {
+		free(wideFile);
+		return 0;
+	}
+	free(wideFile);
+	return (wfad.dwFileAttributes != INVALID_FILE_ATTRIBUTES && 
+         (wfad.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY));
+#else
     struct stat	    statb;
 
     if (FcStat (file, &statb) != 0)
 	return FcFalse;
     return S_ISDIR(statb.st_mode);
+#endif
 }
 
 FcBool
diff -burN fontconfig-2.12.1.orig/src/fcinit.c fontconfig-2.12.1/src/fcinit.c
--- fontconfig-2.12.1.orig/src/fcinit.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcinit.c	2016-10-11 11:08:22.000000000 +0200
@@ -93,9 +93,27 @@
 	size_t plen;
 	FcBool have_own = FcFalse;
 	char *env_file, *env_path;
-
+	FcBool mustFreeEnvFile = FcFalse;
+	FcBool mustFreeEnvPath = FcFalse;
+	#ifdef _WIN32
+			wchar_t* w_env_file =  _wgetenv (L"FONTCONFIG_FILE");
+			if (w_env_file) {
+				if (FcUtf16_to_Utf8(w_env_file, (char**)&env_file)) {
+					mustFreeEnvFile = 1;
+				}
+			}
+			wchar_t* w_env_path = _wgetenv (L"FONTCONFIG_PATH");
+			if (w_env_path) {
+				if (FcUtf16_to_Utf8(w_env_path, (char**)&env_path)) {
+					mustFreeEnvPath = 1;
+				}
+			}
+	#else
 	env_file = getenv ("FONTCONFIG_FILE");
 	env_path = getenv ("FONTCONFIG_PATH");
+	#endif
+		
+	
 	if ((env_file != NULL && env_file[0] != 0) ||
 	    (env_path != NULL && env_path[0] != 0))
 	    have_own = FcTrue;
@@ -136,9 +154,28 @@
 		FcStrFree (prefix);
 	    fallback = FcInitFallbackConfig (sysroot);
 	    FcConfigDestroy (config);
-
+		if (mustFreeEnvFile) {
+			free((void*)env_file);
+			env_file = 0;
+			mustFreeEnvFile = 0;
+		}
+		if (mustFreeEnvPath) {
+			free((void*)env_path);
+			env_path = 0;
+			mustFreeEnvPath = 0;
+		}
 	    return fallback;
 	}
+	if (mustFreeEnvFile) {
+		free((void*)env_file);
+		env_file = 0;
+		mustFreeEnvFile = 0;
+	}
+	if (mustFreeEnvPath) {
+		free((void*)env_path);
+		env_path = 0;
+		mustFreeEnvPath = 0;
+	}
 	FcStrFree (prefix);
     }
 
diff -burN fontconfig-2.12.1.orig/src/fcint.h fontconfig-2.12.1/src/fcint.h
--- fontconfig-2.12.1.orig/src/fcint.h	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcint.h	2016-10-11 16:02:54.000000000 +0200
@@ -57,10 +57,10 @@
 
 #ifdef _WIN32
 #  include "fcwindows.h"
-typedef UINT (WINAPI *pfnGetSystemWindowsDirectory)(LPSTR, UINT);
-typedef HRESULT (WINAPI *pfnSHGetFolderPathA)(HWND, int, HANDLE, DWORD, LPSTR);
+typedef UINT (WINAPI *pfnGetSystemWindowsDirectory)(LPWSTR, UINT);
+typedef HRESULT (WINAPI *pfnSHGetFolderPathW)(HWND, int, HANDLE, DWORD, LPWSTR);
 extern pfnGetSystemWindowsDirectory pGetSystemWindowsDirectory;
-extern pfnSHGetFolderPathA pSHGetFolderPathA;
+extern pfnSHGetFolderPathW pSHGetFolderPathW;
 #  define FC_SEARCH_PATH_SEPARATOR ';'
 #  define FC_DIR_SEPARATOR         '\\'
 #  define FC_DIR_SEPARATOR_S       "\\"
diff -burN fontconfig-2.12.1.orig/src/fcstat.c fontconfig-2.12.1/src/fcstat.c
--- fontconfig-2.12.1.orig/src/fcstat.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcstat.c	2016-10-11 15:09:48.000000000 +0200
@@ -76,12 +76,18 @@
 FcStat (const FcChar8 *file, struct stat *statb)
 {
     WIN32_FILE_ATTRIBUTE_DATA wfad;
-    char full_path_name[MAX_PATH];
-    char *basename;
+    wchar_t full_path_name[MAX_PATH];
+    wchar_t *basename;
     DWORD rc;
 
-    if (!GetFileAttributesEx ((LPCSTR) file, GetFileExInfoStandard, &wfad))
+	wchar_t* wideFile;
+	if (!FcUtf8_to_Utf16((const char*)file, &wideFile)) {
 	return -1;
+	}
+    if (!GetFileAttributesExW (wideFile, GetFileExInfoStandard, &wfad)) {
+		free(wideFile);
+		return -1;
+	}
 
     statb->st_dev = 0;
 
@@ -89,11 +95,16 @@
      * Call GetLongPathName() to get the spelling of the path name as it
      * is on disk.
      */
-    rc = GetFullPathName ((LPCSTR) file, sizeof (full_path_name), full_path_name, &basename);
-    if (rc == 0 || rc > sizeof (full_path_name))
+    rc = GetFullPathNameW (wideFile, sizeof (full_path_name), full_path_name, &basename);
+    if (rc == 0 || rc > sizeof (full_path_name)) {
+		free(wideFile);
 	return -1;
+	}
+
+	
+    rc = GetLongPathNameW (full_path_name, full_path_name, sizeof (full_path_name));
 
-    rc = GetLongPathName (full_path_name, full_path_name, sizeof (full_path_name));
+	// FcStringHash will work if casting the wchar_t string to FcChar8* 
     statb->st_ino = FcStringHash ((const FcChar8 *) full_path_name);
 
     statb->st_mode = _S_IREAD | _S_IWRITE;
@@ -108,6 +119,10 @@
     statb->st_uid = statb->st_gid = 0;
     statb->st_rdev = 0;
 
+	
+	free(wideFile);
+	wideFile = 0;
+	
     if (wfad.nFileSizeHigh > 0)
 	return -1;
     statb->st_size = wfad.nFileSizeLow;
diff -burN fontconfig-2.12.1.orig/src/fcxml.c fontconfig-2.12.1/src/fcxml.c
--- fontconfig-2.12.1.orig/src/fcxml.c	2016-07-11 04:41:06.000000000 +0200
+++ fontconfig-2.12.1/src/fcxml.c	2016-10-11 16:42:04.000000000 +0200
@@ -575,9 +575,10 @@
 	else
 	    fprintf (stderr, "Fontconfig %s: line %d: ", s,
 		     (int)XML_GetCurrentLineNumber (parse->parser));
-	if (severe >= FcSevereError)
+	if (severe >= FcSevereError) {
 	    parse->error = FcTrue;
     }
+    }
     else
 	fprintf (stderr, "Fontconfig %s: ", s);
     vfprintf (stderr, fmt, args);
@@ -2080,6 +2081,7 @@
 	if (!prefix)
 	    goto bail;
     }
+
     data = FcStrBufDoneStatic (&parse->pstack->str);
     if (!data)
     {
@@ -2104,16 +2106,20 @@
 	prefix[plen + 1 + dlen] = 0;
 	data = prefix;
     }
+
 #ifdef _WIN32
     if (strcmp ((const char *) data, "CUSTOMFONTDIR") == 0)
     {
 	FcChar8 *p;
 	data = buffer;
-	if (!GetModuleFileName (NULL, (LPCH) buffer, sizeof (buffer) - 20))
+		FcChar8* filename = FcGetModuleFilenameWrapper(NULL);
+		if (!filename)
 	{
 	    FcConfigMessage (parse, FcSevereError, "GetModuleFileName failed");
 	    goto bail;
 	}
+		strncpy((char*)buffer,(const char*) filename, strlen((const char*)filename));
+		free(filename);
 	/*
 	 * Must use the multi-byte aware function to search
 	 * for backslash because East Asian double-byte code
@@ -2128,11 +2134,14 @@
     {
 	FcChar8 *p;
 	data = buffer;
-	if (!GetModuleFileName (NULL, (LPCH) buffer, sizeof (buffer) - 20))
+		FcChar8* filename = FcGetModuleFilenameWrapper(NULL);
+		if (!filename)
 	{
 	    FcConfigMessage (parse, FcSevereError, "GetModuleFileName failed");
 	    goto bail;
 	}
+		strncpy((char*)buffer,(const char*) filename, strlen((const char*)filename));
+		free(filename);
 	p = _mbsrchr (data, '\\');
 	if (p) *p = '\0';
 	strcat ((char *) data, "\\..\\share\\fonts");
@@ -2141,23 +2150,50 @@
     {
 	int rc;
 	data = buffer;
-	rc = pGetSystemWindowsDirectory ((LPSTR) buffer, sizeof (buffer) - 20);
-	if (rc == 0 || rc > sizeof (buffer) - 20)
+		
+		wchar_t widePathBuf[MAX_PATH];
+		rc = pGetSystemWindowsDirectory (widePathBuf, sizeof (widePathBuf) - 20);
+		if (rc == 0 || rc > sizeof (widePathBuf) - 20)
 	{
 	    FcConfigMessage (parse, FcSevereError, "GetSystemWindowsDirectory failed");
 	    goto bail;
 	}
+		
+		char* utf8data;
+		if (!FcUtf16_to_Utf8(widePathBuf, (char**)&utf8data)) {
+			FcConfigMessage (parse, FcSevereError, "GetSystemWindowsDirectory failed");
+			goto bail;
+		}
+		strncpy(data, utf8data, strlen(utf8data));
+		free(utf8data);
+		
 	if (data [strlen ((const char *) data) - 1] != '\\')
 	    strcat ((char *) data, "\\");
 	strcat ((char *) data, "fonts");
     }
 #endif
-    if (strlen ((char *) data) == 0)
+    if (strlen ((char *) data) == 0) {
 	FcConfigMessage (parse, FcSevereWarning, "empty font directory name ignored");
-    else if (!FcStrUsesHome (data) || FcConfigHome ())
-    {
+    } else {
+		if (!FcStrUsesHome (data)) {
 	if (!FcConfigAddDir (parse->config, data))
 	    FcConfigMessage (parse, FcSevereError, "out of memory; cannot add directory %s", data);
+		} else {
+			FcChar8* home = FcConfigHome ();
+
+			if (home && !FcConfigAddDir (parse->config, data))
+				FcConfigMessage (parse, FcSevereError, "out of memory; cannot add directory %s", data);
+				
+#ifdef _WIN32
+			// on windows FcConfigHome converts from wide chars and 
+			// thus allocates a tmp string as return value that 
+			// the caller must free
+			if (home) {
+				free((void*)home);
+			}
+#endif
+		}
+		
     }
     FcStrBufDestroy (&parse->pstack->str);
 
@@ -2230,33 +2266,40 @@
     {
 	int rc;
 	FcStrFree (data);
-	data = malloc (1000);
-	if (!data)
-	{
-	    FcConfigMessage (parse, FcSevereError, "out of memory");
-	    goto bail;
-	}
-	rc = GetTempPath (800, (LPSTR) data);
+
+	wchar_t dataWide[800];
+	
+	rc = GetTempPathW (800, dataWide);
 	if (rc == 0 || rc > 800)
 	{
 	    FcConfigMessage (parse, FcSevereError, "GetTempPath failed");
 	    goto bail;
 	}
+	if (!FcUtf16_to_Utf8(dataWide, (char**)&data)) {
+		FcConfigMessage (parse, FcSevereError, "out of memory");
+		goto bail;
+	}
+	
 	if (data [strlen ((const char *) data) - 1] != '\\')
 	    strcat ((char *) data, "\\");
 	strcat ((char *) data, "fontconfig\\cache");
     }
     else if (strcmp ((const char *) data, "LOCAL_APPDATA_FONTCONFIG_CACHE") == 0)
     {
-	char szFPath[MAX_PATH + 1];
+	wchar_t wideSzFPath[MAX_PATH + 1];
 	size_t len;
 
-	if (!(pSHGetFolderPathA && SUCCEEDED(pSHGetFolderPathA(NULL, /* CSIDL_LOCAL_APPDATA */ 28, NULL, 0, szFPath))))
+	if (!(pSHGetFolderPathW && SUCCEEDED(pSHGetFolderPathW(NULL, /* CSIDL_LOCAL_APPDATA */ 28, NULL, 0, wideSzFPath))))
 	{
-	    FcConfigMessage (parse, FcSevereError, "SHGetFolderPathA failed");
+	    FcConfigMessage (parse, FcSevereError, "SHGetFolderPathW failed");
 	    goto bail;
 	}
-	strncat(szFPath, "\\fontconfig\\cache", MAX_PATH - 1 - strlen(szFPath));
+	char* szFPath;
+	if (!FcUtf16_to_Utf8(wideSzFPath, (char**)&szFPath)) {
+		FcConfigMessage (parse, FcSevereError, "out of memory");
+		goto bail;
+	}
+	strcat(szFPath, "\\fontconfig\\cache");
 	len = strlen(szFPath) + 1;
 	FcStrFree (data);
 	data = malloc(len);
@@ -2266,14 +2309,31 @@
 	    goto bail;
 	}
 	strncpy((char *) data, szFPath, len);
+	free(szFPath);
     }
 #endif
-    if (strlen ((char *) data) == 0)
+    if (strlen ((char *) data) == 0) {
 	FcConfigMessage (parse, FcSevereWarning, "empty cache directory name ignored");
-    else if (!FcStrUsesHome (data) || FcConfigHome ())
-    {
-	if (!FcConfigAddCacheDir (parse->config, data))
+    } else {
+		if (!FcStrUsesHome (data)) {
+			if (!FcConfigAddDir (parse->config, data))
 	    FcConfigMessage (parse, FcSevereError, "out of memory; cannot add cache directory %s", data);
+		} else {
+			FcChar8* home = FcConfigHome ();
+
+			if (home && !FcConfigAddDir (parse->config, data))
+				FcConfigMessage (parse, FcSevereError, "out of memory; cannot add cache directory %s", data);
+				
+#ifdef _WIN32
+			// on windows FcConfigHome converts from wide chars and 
+			// thus allocates a tmp string as return value that 
+			// the caller must free
+			if (home) {
+				 free((void*)home);
+			}
+#endif
+		}
+		
     }
     FcStrBufDestroy (&parse->pstack->str);
 
@@ -2394,8 +2454,9 @@
 		goto userconf;
 	}
     }
-    if (!FcConfigParseAndLoad (parse->config, s, !ignore_missing))
+    if (!FcConfigParseAndLoad (parse->config, s, !ignore_missing)) {
 	parse->error = FcTrue;
+	}
 #ifndef _WIN32
     else
     {
@@ -3220,7 +3281,7 @@
 
 #ifdef _WIN32
 pfnGetSystemWindowsDirectory pGetSystemWindowsDirectory = NULL;
-pfnSHGetFolderPathA pSHGetFolderPathA = NULL;
+pfnSHGetFolderPathW pSHGetFolderPathW = NULL;
 #endif
 
 FcBool
@@ -3247,16 +3308,16 @@
 #ifdef _WIN32
     if (!pGetSystemWindowsDirectory)
     {
-        HMODULE hk32 = GetModuleHandleA("kernel32.dll");
-        if (!(pGetSystemWindowsDirectory = (pfnGetSystemWindowsDirectory) GetProcAddress(hk32, "GetSystemWindowsDirectoryA")))
-            pGetSystemWindowsDirectory = (pfnGetSystemWindowsDirectory) GetWindowsDirectory;
+        HMODULE hk32 = GetModuleHandleW(L"kernel32.dll");
+        if (!(pGetSystemWindowsDirectory = (pfnGetSystemWindowsDirectory) GetProcAddress(hk32, "GetSystemWindowsDirectoryW")))
+            pGetSystemWindowsDirectory = (pfnGetSystemWindowsDirectory) GetWindowsDirectoryW;
     }
-    if (!pSHGetFolderPathA)
+    if (!pSHGetFolderPathW)
     {
-        HMODULE hSh = LoadLibraryA("shfolder.dll");
+        HMODULE hSh = LoadLibraryW(L"shfolder.dll");
         /* the check is done later, because there is no provided fallback */
         if (hSh)
-            pSHGetFolderPathA = (pfnSHGetFolderPathA) GetProcAddress(hSh, "SHGetFolderPathA");
+            pSHGetFolderPathW = (pfnSHGetFolderPathW) GetProcAddress(hSh, "SHGetFolderPathW");
     }
 #endif
 
@@ -3314,7 +3375,6 @@
 
     if (!p)
 	goto bail1;
-
     if (!FcConfigParseInit (&parse, name, config, p))
 	goto bail2;
 
@@ -3343,7 +3403,6 @@
 	    FcConfigMessage (&parse, FcSevereError, "failed reading config file");
 	    goto bail3;
 	}
-
 #ifdef ENABLE_LIBXML2
 	if (xmlParseChunk (p, buf, len, len == 0))
 #else
@@ -3356,6 +3415,7 @@
 	}
     } while (len != 0);
     error = parse.error;
+
 bail3:
     FcConfigCleanup (&parse);
 bail2:
