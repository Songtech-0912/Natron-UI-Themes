--- src/corelib/thread/qthreadpool.h.orig	2016-04-27 12:42:36.310909690 +0200
+++ src/corelib/thread/qthreadpool.h	2016-04-27 12:45:31.895589631 +0200
@@ -38,13 +38,40 @@
 
 #include <QtCore/qthread.h>
 #include <QtCore/qrunnable.h>
+#include <QtCore/qwaitcondition.h>
 
 #ifndef QT_NO_THREAD
 
+#define QT_CUSTOM_THREADPOOL
+
 QT_BEGIN_NAMESPACE
 
 
 class QThreadPoolPrivate;
+class QThreadPool;
+
+/*
+ QThread wrapper, provides synchronization against a ThreadPool
+ */
+class Q_CORE_EXPORT QThreadPoolThread : public QThread
+{
+public:
+    QThreadPoolThread();
+    void run();
+    
+private:
+    
+    friend class QThreadPoolPrivate;
+    friend class QThreadPool;
+    
+    void registerThreadInactive();
+
+    QWaitCondition runnableReady;
+    QThreadPoolPrivate *manager;
+    QRunnable *runnable;
+};
+
+
 class Q_CORE_EXPORT QThreadPool : public QObject
 {
     Q_OBJECT
@@ -59,6 +86,7 @@
     ~QThreadPool();
 
     static QThreadPool *globalInstance();
+    static void setGlobalInstance(QThreadPool* instance);
 
     void start(QRunnable *runnable, int priority = 0);
     bool tryStart(QRunnable *runnable);
@@ -78,6 +106,10 @@
 
     void clear();
     void cancel(QRunnable *runnable);
+    
+protected:
+    
+    virtual QThreadPoolThread* createThreadPoolThread() const;
 };
 
 QT_END_NAMESPACE
--- src/corelib/thread/qthreadpool.cpp.orig	2016-04-27 12:37:58.201079296 +0200
+++ src/corelib/thread/qthreadpool.cpp	2016-04-27 12:42:26.171697191 +0200
@@ -39,24 +39,9 @@
 
 #ifndef QT_NO_THREAD
 
-QT_BEGIN_NAMESPACE
-
-Q_GLOBAL_STATIC(QThreadPool, theInstance)
+static QScopedPointer<QThreadPool> gThreadPool(new QThreadPool());
 
-/*
-    QThread wrapper, provides synchronization against a ThreadPool
-*/
-class QThreadPoolThread : public QThread
-{
-public:
-    QThreadPoolThread(QThreadPoolPrivate *manager);
-    void run() Q_DECL_OVERRIDE;
-    void registerThreadInactive();
-
-    QWaitCondition runnableReady;
-    QThreadPoolPrivate *manager;
-    QRunnable *runnable;
-};
+QT_BEGIN_NAMESPACE
 
 /*
     QThreadPool private class.
@@ -66,8 +51,8 @@
 /*!
     \internal
 */
-QThreadPoolThread::QThreadPoolThread(QThreadPoolPrivate *manager)
-    :manager(manager), runnable(0)
+QThreadPoolThread::QThreadPoolThread()
+    :manager(0), runnable(0)
 { }
 
 /*
@@ -232,13 +217,20 @@
     return activeThreadCount > maxThreadCount && (activeThreadCount - reservedThreads) > 1;
 }
 
+QThreadPoolThread* QThreadPool::createThreadPoolThread() const
+{
+    QThreadPoolThread* ret = new QThreadPoolThread();
+    ret->setObjectName(QLatin1String("Thread (pooled)"));
+    return ret;
+}
+
 /*!
     \internal
 */
 void QThreadPoolPrivate::startThread(QRunnable *runnable)
 {
-    QScopedPointer <QThreadPoolThread> thread(new QThreadPoolThread(this));
-    thread->setObjectName(QLatin1String("Thread (pooled)"));
+    QScopedPointer <QThreadPoolThread> thread(q_func()->createThreadPoolThread());
+    thread->manager = this;
     allThreads.insert(thread.data());
     ++activeThreads;
 
@@ -428,7 +420,13 @@
 */
 QThreadPool *QThreadPool::globalInstance()
 {
-    return theInstance();
+    return gThreadPool.data();
+}
+
+void
+QThreadPool::setGlobalInstance(QThreadPool* instance)
+{
+    gThreadPool.reset(instance);
 }
 
 /*!
