From b14cd49f891327d8fa5f5607eb19288ca137c5e2 Mon Sep 17 00:00:00 2001
From: Zhihao Li <zhihao.li@autodesk.com>
Date: Tue, 9 May 2017 04:40:54 -0700
Subject: [PATCH] Fix MAYA-82248. Patch file:
 backport_core_profile_qtdeclarative_5.6.1.patch

Change-Id: I5dae268ecaab5796b0b7b6f5154b99ceb48d19ec
---
 src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp b/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp
index 45fb857fb3..20cc0f365a 100644
--- a/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp
+++ b/src/quick/scenegraph/coreapi/qsgbatchrenderer.cpp
@@ -2001,6 +2001,8 @@ Renderer::ClipType Renderer::updateStencilClip(const QSGClipNode *clip)
     }
 
     ClipType clipType = NoClip;
+    GLuint vbo = 0;
+    int vboSize = 0;
 
     glDisable(GL_SCISSOR_TEST);
 
@@ -2085,7 +2087,21 @@ Renderer::ClipType Renderer::updateStencilClip(const QSGClipNode *clip)
             const QSGGeometry *g = clip->geometry();
             Q_ASSERT(g->attributeCount() > 0);
             const QSGGeometry::Attribute *a = g->attributes();
-            glVertexAttribPointer(0, a->tupleSize, a->type, GL_FALSE, g->sizeOfVertex(), g->vertexData());
+
+            if (!vbo)
+                glGenBuffers(1, &vbo);
+
+            glBindBuffer(GL_ARRAY_BUFFER, vbo);
+
+            const int vertexByteSize = g->sizeOfVertex() * g->vertexCount();
+            if (vboSize < vertexByteSize) {
+                vboSize = vertexByteSize;
+                glBufferData(GL_ARRAY_BUFFER, vertexByteSize, g->vertexData(), GL_STATIC_DRAW);
+            } else {
+                glBufferSubData(GL_ARRAY_BUFFER, 0, vertexByteSize, g->vertexData());
+            }
+
+            glVertexAttribPointer(0, a->tupleSize, a->type, GL_FALSE, g->sizeOfVertex(), 0);
 
             m_clipProgram.setUniformValue(m_clipMatrixId, m);
             if (g->indexCount()) {
@@ -2094,12 +2110,17 @@ Renderer::ClipType Renderer::updateStencilClip(const QSGClipNode *clip)
                 glDrawArrays(g->drawingMode(), 0, g->vertexCount());
             }
 
+            glBindBuffer(GL_ARRAY_BUFFER, 0);
+
             ++m_currentStencilValue;
         }
 
         clip = clip->clipList();
     }
 
+    if (vbo)
+        glDeleteBuffers(1, &vbo);
+
     if (clipType & StencilClip) {
         m_clipProgram.disableAttributeArray(0);
         glStencilFunc(GL_EQUAL, m_currentStencilValue, 0xff); // stencil test, ref, test mask
