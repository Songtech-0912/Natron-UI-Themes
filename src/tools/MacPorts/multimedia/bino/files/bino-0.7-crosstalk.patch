diff --git a/src/main.cpp b/src/main.cpp
index 4b3fb5c..e2a33b8 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -99,6 +99,10 @@ int main(int argc, char *argv[])
     options.push_back(&swap_eyes);
     opt::flag benchmark("benchmark", 'b', opt::optional);
     options.push_back(&benchmark);
+    opt::val<std::string> crosstalk_str("crosstalk", 'C', opt::optional);
+    options.push_back(&crosstalk_str);
+    opt::val<float> ghostbust("ghostbust", 'G', opt::optional, 0.0, 100.0);
+    options.push_back(&ghostbust);
     // Accept some Equalizer options. These are passed to Equalizer for interpretation.
     opt::val<std::string> eq_server("eq-server", '\0', opt::optional);
     options.push_back(&eq_server);
@@ -173,6 +177,9 @@ int main(int argc, char *argv[])
                 "  -f|--fullscreen      Fullscreen\n"
                 "  -c|--center          Center window on screen\n"
                 "  -s|--swap-eyes       Swap left/right view\n"
+                "  -C|--crosstalk=VAL   Crosstalk leak level in %% (0 to 100). VAL may\n"
+                "                       be one value or comma-separated R,G,B values.\n"
+                "  -G|--ghostbust=VAL   Amount of ghostbusting to apply, in %% (0 to 100)\n"
                 "  -b|--benchmark       Benchmark mode (no audio, no timesync, show fps)\n"
                 "\n"
                 "Keyboard control:\n"
@@ -284,6 +291,42 @@ int main(int argc, char *argv[])
             debug::crash();
         }
     }
+    {
+        // decode crosstalk, which is a string composed of one or three
+        // flaoting-point numbers separated by commas
+        float ct[3] = {0.0, 0.0, 0.0};
+        std::string str = crosstalk_str.value();
+        std::string::size_type lastPos = 0;
+        std::string::size_type pos = str.find_first_of(',');
+        
+        int i = 0;
+        while (i < 3 && pos != std::string::npos) {
+            std::istringstream s(str.substr(lastPos, pos - lastPos));
+            if (s >> ct[i]) {
+                ++i;
+            }
+            // skip delimiter
+            lastPos = pos + 1;
+            pos = str.find_first_of(',', lastPos);
+        }
+        if (i < 3) {
+            std::istringstream s(str.substr(lastPos, str.size() - lastPos));
+            if (s >> ct[i]) {
+                ++i;
+            }
+        }
+        if (i < 3) {
+            if (i < 2) {
+                ct[1] = ct[0];
+            }
+            ct[2] = ct[1];
+        }
+
+        init_data.video_state.crosstalk_r = ct[0]/100.0;
+        init_data.video_state.crosstalk_g = ct[1]/100.0;
+        init_data.video_state.crosstalk_b = ct[2]/100.0;
+    }
+    init_data.video_state.ghostbust = ghostbust.value()/100.0;
     init_data.video_state.fullscreen = fullscreen.value();
     init_data.video_state.swap_eyes = swap_eyes.value();
     if (center.value())
diff --git a/src/video_output.h b/src/video_output.h
index dae06c0..88f6b4f 100644
--- a/src/video_output.h
+++ b/src/video_output.h
@@ -36,6 +36,10 @@ public:
     float brightness;   // -1 .. +1
     float hue;          // -1 .. +1
     float saturation;   // -1 .. +1
+    float crosstalk_r;  // 0 .. 1
+    float crosstalk_g;  // 0 .. 1
+    float crosstalk_b;  // 0 .. 1
+    float ghostbust;    // 0 .. 1
     bool fullscreen;
     bool swap_eyes;
 
diff --git a/src/video_output_opengl.cpp b/src/video_output_opengl.cpp
index ca1b4ec..2bad29d 100644
--- a/src/video_output_opengl.cpp
+++ b/src/video_output_opengl.cpp
@@ -566,6 +566,10 @@ void video_output_opengl::display(bool toggle_swap_eyes, float x, float y, float
         glUniform1i(glGetUniformLocation(_render_prg, "mask_tex"), 2);
         glUniform1f(glGetUniformLocation(_render_prg, "step_x"), 1.0f / static_cast<float>(viewport[2]));
         glUniform1f(glGetUniformLocation(_render_prg, "step_y"), 1.0f / static_cast<float>(viewport[3]));
+        glUniform3f(glGetUniformLocation(_render_prg, "crosstalk"),
+                    _state.crosstalk_r * _state.ghostbust,
+                    _state.crosstalk_g * _state.ghostbust,
+                    _state.crosstalk_b * _state.ghostbust);
     }
 
     if (_mode == stereo)
diff --git a/src/video_output_opengl_render.fs.glsl b/src/video_output_opengl_render.fs.glsl
index b6c71e6..6382589 100644
--- a/src/video_output_opengl_render.fs.glsl
+++ b/src/video_output_opengl_render.fs.glsl
@@ -37,6 +37,7 @@ uniform sampler2D rgb_r;
 uniform sampler2D mask_tex;
 uniform float step_x;
 uniform float step_y;
+uniform vec3 crosstalk;
 #endif
 
 #if defined(mode_anaglyph_monochrome) || defined(mode_anaglyph_half_color)
@@ -75,6 +76,13 @@ vec3 rgb_to_srgb(vec3 rgb)
 #endif
 }
 
+#if defined(mode_even_odd_rows) || defined(mode_even_odd_columns) || defined(mode_checkerboard)
+vec3 ghostbust(vec3 original, vec3 other) {
+    //return (original * (1.0 - CT) + CT * vec3(1.0,1.0,1.0)) - other * CT;
+    return original + crosstalk - (other + original) * crosstalk;
+}
+#endif
+
 void main()
 {
     vec3 srgb;
@@ -97,55 +105,38 @@ void main()
      */
     float m = texture2D(mask_tex, gl_TexCoord[1].xy).x;
 # if defined(mode_even_odd_rows)
-    if (m > 0.5)
-    {
-        vec3 rgb0 = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
-        vec3 rgb1 = texture2D(rgb_l, gl_TexCoord[0].xy).rgb;
-        vec3 rgb2 = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
-        srgb = rgb_to_srgb((rgb0 + 2.0 * rgb1 + rgb2) / 4.0);
-    }
-    else
-    {
-        vec3 rgb0 = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
-        vec3 rgb1 = texture2D(rgb_r, gl_TexCoord[0].xy).rgb;
-        vec3 rgb2 = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
-        srgb = rgb_to_srgb((rgb0 + 2.0 * rgb1 + rgb2) / 4.0);
-    }
+    vec3 rgb0_l = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
+    vec3 rgb1_l = texture2D(rgb_l, gl_TexCoord[0].xy).rgb;
+    vec3 rgb2_l = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
+    vec3 rgbc_l = (rgb0_l + 2.0 * rgb1_l + rgb2_l) / 4.0;
+    vec3 rgb0_r = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
+    vec3 rgb1_r = texture2D(rgb_r, gl_TexCoord[0].xy).rgb;
+    vec3 rgb2_r = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
+    vec3 rgbc_r = (rgb0_r + 2.0 * rgb1_r + rgb2_r) / 4.0;
 # elif defined(mode_even_odd_columns)
-    if (m > 0.5)
-    {
-        vec3 rgb0 = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
-        vec3 rgb1 = texture2D(rgb_l, gl_TexCoord[0].xy).rgb;
-        vec3 rgb2 = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
-        srgb = rgb_to_srgb((rgb0 + 2.0 * rgb1 + rgb2) / 4.0);
-    }
-    else
-    {
-        vec3 rgb0 = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
-        vec3 rgb1 = texture2D(rgb_r, gl_TexCoord[0].xy).rgb;
-        vec3 rgb2 = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
-        srgb = rgb_to_srgb((rgb0 + 2.0 * rgb1 + rgb2) / 4.0);
-    }
+    vec3 rgb0_l = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
+    vec3 rgb1_l = texture2D(rgb_l, gl_TexCoord[0].xy).rgb;
+    vec3 rgb2_l = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
+    vec3 rgbc_l = (rgb0_l + 2.0 * rgb1_l + rgb2_l) / 4.0;
+    vec3 rgb0_r = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
+    vec3 rgb1_r = texture2D(rgb_r, gl_TexCoord[0].xy).rgb;
+    vec3 rgb2_r = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
+    vec3 rgbc_r = (rgb0_r + 2.0 * rgb1_r + rgb2_r) / 4.0;
 # elif defined(mode_checkerboard)
-    if (m > 0.5)
-    {
-        vec3 rgb0 = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
-        vec3 rgb1 = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
-        vec3 rgb2 = texture2D(rgb_l, gl_TexCoord[0].xy).rgb;
-        vec3 rgb3 = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
-        vec3 rgb4 = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
-        srgb = rgb_to_srgb((rgb0 + rgb1 + 4.0 * rgb2 + rgb3 + rgb4) / 8.0);
-    }
-    else
-    {
-        vec3 rgb0 = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
-        vec3 rgb1 = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
-        vec3 rgb2 = texture2D(rgb_r, gl_TexCoord[0].xy).rgb;
-        vec3 rgb3 = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
-        vec3 rgb4 = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
-        srgb = rgb_to_srgb((rgb0 + rgb1 + 4.0 * rgb2 + rgb3 + rgb4) / 8.0);
-    }
+    vec3 rgb0_l = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
+    vec3 rgb1_l = texture2D(rgb_l, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
+    vec3 rgb2_l = texture2D(rgb_l, gl_TexCoord[0].xy).rgb;
+    vec3 rgb3_l = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
+    vec3 rgb4_l = texture2D(rgb_l, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
+    vec3 rgbc_l = (rgb0_l + rgb1_l + 4.0 * rgb2_l + rgb3_l + rgb4_l) / 8.0;
+    vec3 rgb0_r = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(0.0, step_y)).rgb;
+    vec3 rgb1_r = texture2D(rgb_r, gl_TexCoord[0].xy - vec2(step_x, 0.0)).rgb;
+    vec3 rgb2_r = texture2D(rgb_r, gl_TexCoord[0].xy).rgb;
+    vec3 rgb3_r = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(step_x, 0.0)).rgb;
+    vec3 rgb4_r = texture2D(rgb_r, gl_TexCoord[0].xy + vec2(0.0, step_y)).rgb;
+    vec3 rgbc_r = (rgb0_r + rgb1_r + 4.0 * rgb2_r + rgb3_r + rgb4_r) / 8.0;
 # endif
+    srgb = rgb_to_srgb(ghostbust(m*rgbc_l+(1.0-m)*rgbc_r, m*rgbc_r+(1.0-m)*rgbc_l));
 
 #else
 
