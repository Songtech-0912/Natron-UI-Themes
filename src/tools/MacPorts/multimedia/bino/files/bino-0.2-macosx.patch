diff -urN bino-0.2/Makefile.am bino-0.2-macosx-clean/Makefile.am
--- bino-0.2/Makefile.am	2010-09-29 07:08:28.000000000 +0200
+++ bino-0.2-macosx-clean/Makefile.am	2010-10-22 14:35:32.000000000 +0200
@@ -5,6 +5,7 @@
 # notice are preserved. This file is offered as-is, without any warranty.
 
 SUBDIRS = src doc
+ACLOCAL_AMFLAGS=-Im4
 
 # Create the ChangeLog file from the git log
 dist-hook:
diff -urN bino-0.2/configure.ac bino-0.2-macosx-clean/configure.ac
--- bino-0.2/configure.ac	2010-10-17 14:05:30.000000000 +0200
+++ bino-0.2-macosx-clean/configure.ac	2010-10-22 14:57:06.000000000 +0200
@@ -42,7 +42,7 @@
 
 dnl Feature checks needed by the base module
 AC_CHECK_DECLS([optreset], [#include <getopt.h>])
-AC_SEARCH_LIBS([iconv_open], [iconv])
+AM_ICONV
 AC_SEARCH_LIBS([clock_gettime], [rt])
 AC_CHECK_FUNCS([backtrace clock_gettime])
 
@@ -69,22 +69,28 @@
 fi
 
 dnl glut
-AC_CHECK_LIB([glut], [glutMainLoopEvent], [HAVE_LIBGLUT=1], [HAVE_LIBGLUT=0])
+dnl glut
+AX_CHECK_GLUT
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GLUT_CFLAGS $CPPFLAGS"
+ax_save_LDFLAGS=$LDFLAGS
+LDFLAGS="$GLUT_LIBS $LDFLAGS"
+HAVE_LIBGLUT=0
+AC_CHECK_FUNCS([glutCloseFunc glutWMCloseFunc glutSetOption glutLeaveMainLoop glutLeaveMainLoop])
+AC_CHECK_FUNC(glutMainLoopEvent, [HAVE_LIBGLUT=1])
+AC_CHECK_FUNC(glutCheckLoop,
+       [HAVE_LIBGLUT=1
+        AC_DEFINE(HAVE_GLUTCHECKLOOP, 1, Define to 1 if you have the ‘glutCheckLoop’ function.)])
+LDFLAGS=$ax_save_LDFLAGS
+CPPFLAGS=$ax_save_CPPFLAGS
+
 if test "$HAVE_LIBGLUT" != "1"; then
     AC_MSG_WARN([libglut (freeglut version) not found])
     AC_MSG_WARN([libglut (freeglut version) is provided by freeglut; Debian package: freeglut3-dev])
-else
-    AC_SUBST([libglut_CFLAGS], [])
-    AC_SUBST([libglut_LIBS], [-lglut])
 fi
 
-dnl glu
-PKG_CHECK_MODULES([libglu], [glu >= 0.0], [HAVE_LIBGLU=1], [HAVE_LIBGLU=0])
-if test "$HAVE_LIBGLU" != "1"; then
-    AC_MSG_WARN([libglu not found:])
-    AC_MSG_WARN([$libglu_PKG_ERRORS])
-    AC_MSG_WARN([libglu is provided by Mesa; Debian package: libglu-dev])
-fi
+dnl MacOSX GLUT hack requires an additional framework
+AC_CHECK_HEADER(ApplicationServices/ApplicationServices.h, [LDFLAGS="-framework ApplicationServices $LDFLAGS"])
 
 dnl freealut
 PKG_CHECK_MODULES([libalut], [freealut >= 0.0], [HAVE_LIBALUT=1], [HAVE_LIBALUT=0])
@@ -98,8 +104,7 @@
 if test "$HAVE_LIBAVFORMAT" != "1" \
     -o "$HAVE_LIBSWSCALE" != "1" \
     -o "$HAVE_LIBGLEW" != "1" \
-    -o "$HAVE_LIBGLUT" != "1" \
-    -o "$HAVE_LIBGLU" != "1" \
+    -o "$no_glut" == "yes" \
     -o "$HAVE_LIBALUT" != "1"; then
     AC_MSG_ERROR([Required libraries were not found. See messages above.])
 fi
diff -urN bino-0.2/m4/ax_check_gl.m4 bino-0.2-macosx-clean/m4/ax_check_gl.m4
--- bino-0.2/m4/ax_check_gl.m4	1970-01-01 01:00:00.000000000 +0100
+++ bino-0.2-macosx-clean/m4/ax_check_gl.m4	2010-10-22 14:35:32.000000000 +0200
@@ -0,0 +1,155 @@
+# -*- mode: autoconf -*-
+#
+# AX_CHECK_GL
+#
+# Check for an OpenGL implementation.  If GL is found, the required compiler
+# and linker flags are included in the output variables "GL_CFLAGS" and
+# "GL_LIBS", respectively.  If no usable GL implementation is found, "no_gl"
+# is set to "yes".
+#
+# If the header "GL/gl.h" is found, "HAVE_GL_GL_H" is defined.  If the header
+# "OpenGL/gl.h" is found, HAVE_OPENGL_GL_H is defined.  These preprocessor
+# definitions may not be mutually exclusive.
+#
+# version: 2.6
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_CHECK_GL],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+AC_REQUIRE([AC_PATH_X])dnl
+AC_REQUIRE([AC_PROG_SED])dnl
+AC_REQUIRE([AX_PTHREAD])dnl
+
+AC_LANG_PUSH([C])
+AX_LANG_COMPILER_MS
+AS_IF([test X$ax_compiler_ms = Xno],
+      [GL_CFLAGS="${PTHREAD_CFLAGS}"; GL_LIBS="${PTHREAD_LIBS}"])
+
+#
+# Use x_includes and x_libraries if they have been set (presumably by
+# AC_PATH_X).
+#
+AS_IF([test X$no_x != Xyes -a -n "$x_includes"],
+      [GL_CFLAGS="-I$x_includes $GL_CFLAGS"])
+
+AC_CHECK_HEADERS([windows.h])
+
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
+AC_CHECK_HEADERS([GL/gl.h OpenGL/gl.h], , , [
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+])
+CPPFLAGS=$ax_save_CPPFLAGS
+
+m4_define([AX_CHECK_GL_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GL_H
+#   include <GL/gl.h>
+# elif defined(HAVE_OPENGL_GL_H)
+#   include <OpenGL/gl.h>
+# else
+#   error no gl.h
+# endif]],
+                           [[glBegin(0)]])])
+
+m4_define([AX_CHECK_GL_GLX_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GL_H
+#   include <GL/gl.h>
+# elif defined(HAVE_OPENGL_GL_H)
+#   include <OpenGL/gl.h>
+# else
+#   error no gl.h
+# endif]],
+                           [[glXQueryVersion(0, 0, 0)]])])
+
+AC_CACHE_CHECK([for OpenGL library], [ax_cv_check_gl_libgl],
+[ax_cv_check_gl_libgl=no
+case $host_cpu in
+  x86_64) ax_check_gl_libdir=lib64 ;;
+  *)      ax_check_gl_libdir=lib ;;
+esac
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$CPPFLAGS $GL_CFLAGS"
+ax_save_LDFLAGS=$LDFLAGS
+AS_IF([test X$no_x != Xyes -a -n "$x_libraries"],
+      [LDFLAGS="$LDFLAGS -L$x_libraries"])
+ax_save_LIBS=$LIBS
+ax_check_libs="-lopengl32 -lGL"
+for ax_lib in $ax_check_libs; do
+  AS_IF([test X$ax_compiler_ms = Xyes],
+        [ax_try_lib=`echo $ax_lib | $SED -e 's/^-l//' -e 's/$/.lib/'`],
+        [ax_try_lib=$ax_lib])
+  LDFLAGS="$ax_save_LDFLAGS $GL_LIBS"
+  LIBS="$ax_try_lib $ax_save_LIBS"
+AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+               [ax_cv_check_gl_libgl=$ax_try_lib; break],
+               [ax_check_gl_nvidia_flags="-L/usr/$ax_check_gl_libdir/nvidia"
+                LDFLAGS="$ax_save_LDFLAGS $GL_LIBS $ax_check_gl_nvidia_flags"
+                AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+                               [ax_cv_check_gl_libgl="$ax_check_gl_nvidia_flags $ax_try_lib"; break],
+                               [ax_check_gl_dylib_flag='-dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib'
+                                LDFLAGS="$ax_save_LDFLAGS $GL_LIBS $ax_check_gl_dylib_flag"
+                                AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+                                               [ax_cv_check_gl_libgl="$ax_check_gl_dylib_flag $ax_try_lib"; break])])])
+done
+
+#
+# If no_x is "yes", we don't want to wind up using a libGL that is
+# linked with X11.  Test to see if the found libGL includes GLX
+# functions.  If it does and no_x is "yes", we want to reset
+# ax_cv_check_gl_libgl back to "no".
+#
+# Note that LDFLAGS and LIBS should still have whatever values they
+# had when we broke out of the test loop above; use that.
+#
+AS_IF([test "X$ax_cv_check_gl_libgl" != Xno],
+      [AC_LINK_IFELSE([AX_CHECK_GL_GLX_PROGRAM],
+                      [AS_IF([test X$no_x = Xyes],
+                             [ax_cv_check_gl_libgl=no])])])
+
+LIBS=$ax_save_LIBS
+AS_IF([test "X$ax_cv_check_gl_libgl" = Xno -a X$no_x = Xyes],
+      [LDFLAGS="$ax_save_LDFLAGS -framework OpenGL"
+      AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+                     [ax_cv_check_gl_libgl='-framework OpenGL'])])
+
+LDFLAGS=$ax_save_LDFLAGS
+CPPFLAGS=$ax_save_CPPFLAGS])
+
+AS_IF([test "X$ax_cv_check_gl_libgl" = Xno],
+      [no_gl=yes; GL_CFLAGS=""; GL_LIBS=""],
+      [GL_LIBS="$ax_cv_check_gl_libgl $GL_LIBS"])
+AC_LANG_POP([C])
+
+AC_SUBST([GL_CFLAGS])
+AC_SUBST([GL_LIBS])
+])dnl
diff -urN bino-0.2/m4/ax_check_glu.m4 bino-0.2-macosx-clean/m4/ax_check_glu.m4
--- bino-0.2/m4/ax_check_glu.m4	1970-01-01 01:00:00.000000000 +0100
+++ bino-0.2-macosx-clean/m4/ax_check_glu.m4	2010-10-22 14:35:32.000000000 +0200
@@ -0,0 +1,141 @@
+# -*- mode: autoconf -*-
+#
+# AX_CHECK_GLU
+#
+# Check for GLU.  If GLU is found, the required preprocessor and linker flags
+# are included in the output variables "GLU_CFLAGS" and "GLU_LIBS",
+# respectively.  If no GLU implementation is found, "no_glu" is set to "yes".
+#
+# If the header "GL/glu.h" is found, "HAVE_GL_GLU_H" is defined.  If the
+# header "OpenGL/glu.h" is found, HAVE_OPENGL_GLU_H is defined.  These
+# preprocessor definitions may not be mutually exclusive.
+#
+# Some implementations (in particular, some versions of Mac OS X) are known
+# to treat the GLU tesselator callback function type as "GLvoid (*)(...)"
+# rather than the standard "GLvoid (*)()".  If the former condition is
+# detected, this macro defines "HAVE_VARARGS_GLU_TESSCB".
+#
+# version: 2.4
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_CHECK_GLU],
+[AC_REQUIRE([AX_CHECK_GL])dnl
+AC_REQUIRE([AC_PROG_CXX])dnl
+GLU_CFLAGS=$GL_CFLAGS
+
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
+AC_CHECK_HEADERS([GL/glu.h OpenGL/glu.h], , , [
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+])
+CPPFLAGS=$ax_save_CPPFLAGS
+
+m4_define([AX_CHECK_GLU_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GLU_H
+#   include <GL/glu.h>
+# elif defined(HAVE_OPENGL_GLU_H)
+#   include <OpenGL/glu.h>
+# else
+#   error no glu.h
+# endif]],
+                           [[gluBeginCurve(0)]])])
+
+AC_CACHE_CHECK([for OpenGL Utility library], [ax_cv_check_glu_libglu],
+[ax_cv_check_glu_libglu=no
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
+ax_save_LDFLAGS=$LDFLAGS
+ax_save_LIBS=$LIBS
+
+#
+# First, check for the possibility that everything we need is already in
+# GL_LIBS.
+#
+LDFLAGS="$ax_save_LDFLAGS $GL_LIBS"
+#
+# libGLU typically links with libstdc++ on POSIX platforms.
+# However, setting the language to C++ means that test program
+# source is named "conftest.cc"; and Microsoft cl doesn't know what
+# to do with such a file.
+#
+AC_LANG_PUSH([C++])
+AS_IF([test X$ax_compiler_ms = Xyes],
+      [AC_LANG_PUSH([C])])
+AC_LINK_IFELSE([AX_CHECK_GLU_PROGRAM],
+               [ax_cv_check_glu_libglu=yes],
+               [LIBS=""
+                ax_check_libs="-lglu32 -lGLU"
+                for ax_lib in ${ax_check_libs}; do
+                  AS_IF([test X$ax_compiler_ms = Xyes],
+                        [ax_try_lib=`echo $ax_lib | $SED -e 's/^-l//' -e 's/$/.lib/'`],
+                        [ax_try_lib=$ax_lib])
+                  LIBS="$ax_try_lib $ax_save_LIBS"
+                  AC_LINK_IFELSE([AX_CHECK_GLU_PROGRAM],
+                                 [ax_cv_check_glu_libglu=$ax_try_lib; break])
+                done])
+AS_IF([test X$ax_compiler_ms = Xyes],
+      [AC_LANG_POP([C])])
+AC_LANG_POP([C++])
+
+LIBS=$ax_save_LIBS
+LDFLAGS=$ax_save_LDFLAGS
+CPPFLAGS=$ax_save_CPPFLAGS])
+AS_IF([test "X$ax_cv_check_glu_libglu" = Xno],
+      [no_glu=yes; GLU_CFLAGS=""; GLU_LIBS=""],
+      [AS_IF([test "X$ax_cv_check_glu_libglu" = Xyes],
+             [GLU_LIBS=""],
+             [GLU_LIBS="$ax_cv_check_glu_libglu"])])
+AC_SUBST([GLU_CFLAGS])
+AC_SUBST([GLU_LIBS])
+
+#
+# Some versions of Mac OS X include a broken interpretation of the GLU
+# tesselation callback function signature when using the C++ compiler.
+#
+AS_IF([test "X$ax_cv_check_glu_libglu" != Xno],
+      [AC_CACHE_CHECK([for varargs GLU tesselator callback function type],
+                      [ax_cv_varargs_glu_tesscb],
+                      [AC_LANG_PUSH([C++])
+                      ax_cv_varargs_glu_tesscb=no
+                      ax_save_CXXFLAGS=$CXXFLAGS
+                      CXXFLAGS="$GL_CFLAGS $CXXFLAGS"
+                      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+# ifdef HAVE_GL_GLU_H
+#   include <GL/glu.h>
+# else
+#   include <OpenGL/glu.h>
+# endif]],
+                                        [[GLvoid (*func)(...); gluTessCallback(0, 0, func)]])],
+                                        [ax_cv_varargs_glu_tesscb=yes])
+                      CXXFLAGS=$ax_save_CXXFLAGS
+                      AC_LANG_POP([C++])])
+      AS_IF([test X$ax_cv_varargs_glu_tesscb = Xyes],
+            [AC_DEFINE([HAVE_VARARGS_GLU_TESSCB], [1],
+                       [Use nonstandard varargs form for the GLU tesselator callback])])])
+])
diff -urN bino-0.2/m4/ax_check_glut.m4 bino-0.2-macosx-clean/m4/ax_check_glut.m4
--- bino-0.2/m4/ax_check_glut.m4	1970-01-01 01:00:00.000000000 +0100
+++ bino-0.2-macosx-clean/m4/ax_check_glut.m4	2010-10-22 14:35:32.000000000 +0200
@@ -0,0 +1,100 @@
+# -*- mode: autoconf -*-
+#
+# AX_CHECK_GLUT
+#
+# Check for GLUT.  If GLUT is found, the required compiler and linker flags
+# are included in the output variables "GLUT_CFLAGS" and "GLUT_LIBS",
+# respectively.  If GLUT is not found, "no_glut" is set to "yes".
+#
+# If the header "GL/glut.h" is found, "HAVE_GL_GLUT_H" is defined.  If the
+# header "GLUT/glut.h" is found, HAVE_GLUT_GLUT_H is defined.  These
+# preprocessor definitions may not be mutually exclusive.
+#
+# version: 2.2
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_CHECK_GLUT],
+[AC_REQUIRE([AX_CHECK_GLU])dnl
+AC_REQUIRE([AC_PATH_XTRA])dnl
+
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GLU_CFLAGS $CPPFLAGS"
+AC_CHECK_HEADERS([GL/glut.h GLUT/glut.h])
+CPPFLAGS=$ax_save_CPPFLAGS
+
+GLUT_CFLAGS=$GLU_CFLAGS
+
+m4_define([AX_CHECK_GLUT_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if HAVE_WINDOWS_H && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GLUT_H
+#   include <GL/glut.h>
+# elif defined(HAVE_GLUT_GLUT_H)
+#   include <GLUT/glut.h>
+# else
+#   error no glut.h
+# endif]],
+                           [[glutMainLoop()]])])
+
+AC_CACHE_CHECK([for GLUT library], [ax_cv_check_glut_libglut],
+[ax_cv_check_glut_libglut=no
+#
+# If X is present, assume GLUT depends on it.
+#
+AC_LANG_PUSH(C)
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GLUT_CFLAGS $CPPFLAGS"
+ax_save_LDFLAGS=$LDFLAGS
+ax_save_LIBS=$LIBS
+LIBS=""
+AS_IF([test X$no_x != Xyes],
+      [ax_check_glut_x_libs="$X_PRE_LIBS -lXmu -lXi $X_EXTRA_LIBS"])
+ax_check_libs="-lglut32 -lglut"
+for ax_lib in $ax_check_libs; do
+  AS_IF([test X$ax_compiler_ms = Xyes],
+        [ax_try_lib=`echo $ax_lib | $SED -e 's/^-l//' -e 's/$/.lib/'`],
+        [ax_try_lib=$ax_lib])
+  LIBS="$ax_try_lib $GLUT_LIBS $ax_check_glut_x_libs $ax_save_LIBS"
+  AC_LINK_IFELSE([AX_CHECK_GLUT_PROGRAM],
+                 [ax_cv_check_glut_libglut=$ax_try_lib; break])
+done
+
+LIBS=$ax_save_LIBS
+AS_IF([test "X$ax_cv_check_glut_libglut" = Xno -a X$no_x = Xyes],
+      [LDFLAGS="$ax_save_LDFLAGS -framework GLUT"
+      AC_LINK_IFELSE([AX_CHECK_GLUT_PROGRAM],
+                     [ax_cv_check_glut_libglut='-framework GLUT'])])
+
+LDFLAGS=$ax_save_LDFLAGS
+CPPFLAGS=$ax_save_CPPFLAGS
+AC_LANG_POP(C)])
+
+AS_IF([test "X$ax_cv_check_glut_libglut" = Xno],
+      [no_glut=yes; GLUT_CFLAGS=""; GLUT_LIBS=""],
+      [GLUT_LIBS="$ax_cv_check_glut_libglut"])
+
+AC_SUBST([GLUT_CFLAGS])
+AC_SUBST([GLUT_LIBS])
+])dnl
diff -urN bino-0.2/m4/ax_lang_compiler_ms.m4 bino-0.2-macosx-clean/m4/ax_lang_compiler_ms.m4
--- bino-0.2/m4/ax_lang_compiler_ms.m4	1970-01-01 01:00:00.000000000 +0100
+++ bino-0.2-macosx-clean/m4/ax_lang_compiler_ms.m4	2010-10-22 14:35:32.000000000 +0200
@@ -0,0 +1,41 @@
+# -*- mode: autoconf -*-
+#
+# Check whether the compiler for the current language is Microsoft.
+#
+# This macro is modeled after _AC_LANG_COMPILER_GNU in the GNU Autoconf
+# implementation.
+#
+# version: 1.0
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_LANG_COMPILER_MS],
+[AC_CACHE_CHECK([whether we are using the Microsoft _AC_LANG compiler],
+                [ax_cv_[]_AC_LANG_ABBREV[]_compiler_ms],
+[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [[#ifndef _MSC_VER
+       choke me
+#endif
+]])],
+                   [ax_compiler_ms=yes],
+                   [ax_compiler_ms=no])
+ax_cv_[]_AC_LANG_ABBREV[]_compiler_ms=$ax_compiler_ms
+])])
diff -urN bino-0.2/m4/ax_pthread.m4 bino-0.2-macosx-clean/m4/ax_pthread.m4
--- bino-0.2/m4/ax_pthread.m4	1970-01-01 01:00:00.000000000 +0100
+++ bino-0.2-macosx-clean/m4/ax_pthread.m4	2010-10-22 14:35:32.000000000 +0200
@@ -0,0 +1,277 @@
+# ===========================================================================
+#           http://www.nongnu.org/autoconf-archive/ax_pthread.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PTHREAD([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro figures out how to build C programs using POSIX threads. It
+#   sets the PTHREAD_LIBS output variable to the threads library and linker
+#   flags, and the PTHREAD_CFLAGS output variable to any special C compiler
+#   flags that are needed. (The user can also force certain compiler
+#   flags/libs to be tested by setting these environment variables.)
+#
+#   Also sets PTHREAD_CC to any special C compiler that is needed for
+#   multi-threaded programs (defaults to the value of CC otherwise). (This
+#   is necessary on AIX to use the special cc_r compiler alias.)
+#
+#   NOTE: You are assumed to not only compile your program with these flags,
+#   but also link it with them as well. e.g. you should link with
+#   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS
+#
+#   If you are only building threads programs, you may wish to use these
+#   variables in your default LIBS, CFLAGS, and CC:
+#
+#     LIBS="$PTHREAD_LIBS $LIBS"
+#     CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+#     CC="$PTHREAD_CC"
+#
+#   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant
+#   has a nonstandard name, defines PTHREAD_CREATE_JOINABLE to that name
+#   (e.g. PTHREAD_CREATE_UNDETACHED on AIX).
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a threads library
+#   is found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it
+#   is not found. If ACTION-IF-FOUND is not specified, the default action
+#   will define HAVE_PTHREAD.
+#
+#   Please let the authors know if this macro fails on any platform, or if
+#   you have any other suggestions or comments. This macro was based on work
+#   by SGJ on autoconf scripts for FFTW (http://www.fftw.org/) (with help
+#   from M. Frigo), as well as ac_pthread and hb_pthread macros posted by
+#   Alejandro Forero Cuervo to the autoconf macro repository. We are also
+#   grateful for the helpful feedback of numerous users.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])
+AC_DEFUN([AX_PTHREAD], [
+AC_REQUIRE([AC_CANONICAL_HOST])
+AC_LANG_SAVE
+AC_LANG_C
+ax_pthread_ok=no
+
+# We used to check for pthread.h first, but this fails if pthread.h
+# requires special compiler flags (e.g. on True64 or Sequent).
+# It gets checked for in the link test anyway.
+
+# First of all, check if the user has set any of the PTHREAD_LIBS,
+# etcetera environment variables, and if threads linking works using
+# them:
+if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
+        save_CFLAGS="$CFLAGS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        save_LIBS="$LIBS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])
+        AC_TRY_LINK_FUNC(pthread_join, ax_pthread_ok=yes)
+        AC_MSG_RESULT($ax_pthread_ok)
+        if test x"$ax_pthread_ok" = xno; then
+                PTHREAD_LIBS=""
+                PTHREAD_CFLAGS=""
+        fi
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+fi
+
+# We must check for the threads library under a number of different
+# names; the ordering is very important because some systems
+# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
+# libraries is broken (non-POSIX).
+
+# Create a list of thread flags to try.  Items starting with a "-" are
+# C compiler flags, and other items are library names, except for "none"
+# which indicates that we try without any flags at all, and "pthread-config"
+# which is a program returning the flags for the Pth emulation library.
+
+ax_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config"
+
+# The ordering *is* (sometimes) important.  Some notes on the
+# individual items follow:
+
+# pthreads: AIX (must check this before -lpthread)
+# none: in case threads are in libc; should be tried before -Kthread and
+#       other compiler flags to prevent continual compiler warnings
+# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
+# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
+# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
+# -pthreads: Solaris/gcc
+# -mthreads: Mingw32/gcc, Lynx/gcc
+# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
+#      doesn't hurt to check since this sometimes defines pthreads too;
+#      also defines -D_REENTRANT)
+#      ... -mt is also the pthreads flag for HP/aCC
+# pthread: Linux, etcetera
+# --thread-safe: KAI C++
+# pthread-config: use pthread-config program (for GNU Pth library)
+
+case "${host_cpu}-${host_os}" in
+        *solaris*)
+
+        # On Solaris (at least, for some versions), libc contains stubbed
+        # (non-functional) versions of the pthreads routines, so link-based
+        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/
+        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
+        # a function called by this macro, so we could check for that, but
+        # who knows whether they'll stub that too in a future libc.)  So,
+        # we'll just look for -pthreads and -lpthread first:
+
+        ax_pthread_flags="-pthreads pthread -mt -pthread $ax_pthread_flags"
+        ;;
+esac
+
+if test x"$ax_pthread_ok" = xno; then
+for flag in $ax_pthread_flags; do
+
+        case $flag in
+                none)
+                AC_MSG_CHECKING([whether pthreads work without any flags])
+                ;;
+
+                -*)
+                AC_MSG_CHECKING([whether pthreads work with $flag])
+                PTHREAD_CFLAGS="$flag"
+                ;;
+
+		pthread-config)
+		AC_CHECK_PROG(ax_pthread_config, pthread-config, yes, no)
+		if test x"$ax_pthread_config" = xno; then continue; fi
+		PTHREAD_CFLAGS="`pthread-config --cflags`"
+		PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
+		;;
+
+                *)
+                AC_MSG_CHECKING([for the pthreads library -l$flag])
+                PTHREAD_LIBS="-l$flag"
+                ;;
+        esac
+
+        save_LIBS="$LIBS"
+        save_CFLAGS="$CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+
+        # Check for various functions.  We must include pthread.h,
+        # since some functions may be macros.  (On the Sequent, we
+        # need a special flag -Kthread to make this header compile.)
+        # We check for pthread_join because it is in -lpthread on IRIX
+        # while pthread_create is in libc.  We check for pthread_attr_init
+        # due to DEC craziness with -lpthreads.  We check for
+        # pthread_cleanup_push because it is one of the few pthread
+        # functions on Solaris that doesn't have a non-functional libc stub.
+        # We try pthread_create on general principles.
+        AC_TRY_LINK([#include <pthread.h>
+	             static void routine(void* a) {a=0;}
+	             static void* start_routine(void* a) {return a;}],
+                    [pthread_t th; pthread_attr_t attr;
+                     pthread_join(th, 0);
+                     pthread_attr_init(&attr);
+                     pthread_cleanup_push(routine, 0);
+                     pthread_create(&th,0,start_routine,0);
+                     pthread_cleanup_pop(0); ],
+                    [ax_pthread_ok=yes])
+
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+
+        AC_MSG_RESULT($ax_pthread_ok)
+        if test "x$ax_pthread_ok" = xyes; then
+                break;
+        fi
+
+        PTHREAD_LIBS=""
+        PTHREAD_CFLAGS=""
+done
+fi
+
+# Various other checks:
+if test "x$ax_pthread_ok" = xyes; then
+        save_LIBS="$LIBS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        save_CFLAGS="$CFLAGS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+
+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
+	AC_MSG_CHECKING([for joinable pthread attribute])
+	attr_name=unknown
+	for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
+	    AC_TRY_LINK([#include <pthread.h>], [int attr=$attr; return attr;],
+                        [attr_name=$attr; break])
+	done
+        AC_MSG_RESULT($attr_name)
+        if test "$attr_name" != PTHREAD_CREATE_JOINABLE; then
+            AC_DEFINE_UNQUOTED(PTHREAD_CREATE_JOINABLE, $attr_name,
+                               [Define to necessary symbol if this constant
+                                uses a non-standard name on your system.])
+        fi
+
+        AC_MSG_CHECKING([if more special flags are required for pthreads])
+        flag=no
+        case "${host_cpu}-${host_os}" in
+            *-aix* | *-freebsd* | *-darwin*) flag="-D_THREAD_SAFE";;
+            *solaris* | *-osf* | *-hpux*) flag="-D_REENTRANT";;
+        esac
+        AC_MSG_RESULT(${flag})
+        if test "x$flag" != xno; then
+            PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
+        fi
+
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+
+        # More AIX lossage: must compile with xlc_r or cc_r
+	if test x"$GCC" != xyes; then
+          AC_CHECK_PROGS(PTHREAD_CC, xlc_r cc_r, ${CC})
+        else
+          PTHREAD_CC=$CC
+	fi
+else
+        PTHREAD_CC="$CC"
+fi
+
+AC_SUBST(PTHREAD_LIBS)
+AC_SUBST(PTHREAD_CFLAGS)
+AC_SUBST(PTHREAD_CC)
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_pthread_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])
+        :
+else
+        ax_pthread_ok=no
+        $2
+fi
+AC_LANG_RESTORE
+])dnl AX_PTHREAD
diff -urN bino-0.2/src/Makefile.am bino-0.2-macosx-clean/src/Makefile.am
--- bino-0.2/src/Makefile.am	2010-10-17 13:34:38.000000000 +0200
+++ bino-0.2-macosx-clean/src/Makefile.am	2010-10-22 15:01:20.000000000 +0200
@@ -34,13 +34,13 @@
 
 AM_CPPFLAGS = -I$(top_srcdir)/src/base \
 	$(libavformat_CFLAGS) $(libswscale_CFLAGS) \
-	$(libglut_CFLAGS) $(libglu_CFLAGS) $(libglew_CFLAGS) \
+	$(GLUT_CFLAGS) $(GLU_CFLAGS) $(GL_CFLAGS) $(libglew_CFLAGS) \
 	$(libalut_CFLAGS)
 
 bino_LDADD = $(top_builddir)/src/base/libbase.a \
 	$(libavformat_LIBS) $(libswscale_LIBS) \
-	$(libglut_LIBS) $(libglu_LIBS) $(libglew_LIBS) \
-	$(libalut_LIBS)
+	$(GLUT_LIBS) $(GLU_LIBS) $(GL_LIBS) $(libglew_LIBS) \
+	$(libalut_LIBS) $(LIBICONV)
 
 %.glsl.h: %.glsl
 	$(AM_V_GEN)MACRONAME="`echo $< | sed -e s/^.*\\\/// -e s/\\\.glsl$$// -e s/[\\\.-]/_/g | tr [a-z] [A-Z]`_GLSL_STR"; \
diff -urN bino-0.2/src/video_output_opengl.cpp bino-0.2-macosx-clean/src/video_output_opengl.cpp
--- bino-0.2/src/video_output_opengl.cpp	2010-10-17 14:01:29.000000000 +0200
+++ bino-0.2-macosx-clean/src/video_output_opengl.cpp	2010-10-22 14:35:47.000000000 +0200
@@ -25,7 +25,18 @@
 #include <cstring>
 
 #include <GL/glew.h>
+#ifdef HAVE_GLUT_GLUT_H
+#include <GLUT/glut.h>
+#else
 #include <GL/freeglut.h>
+#endif
+
+// Workaround for GLUT on MacOSX, see
+// http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=272712
+#ifdef __APPLE__
+#include <ApplicationServices/ApplicationServices.h>
+ProcessSerialNumber gGLUTAppPSN;
+#endif
 
 #include "exc.h"
 #include "msg.h"
@@ -81,6 +92,9 @@
         arguments.push_back(NULL);
         int argc = arguments.size() - 1;
         char **argv = const_cast<char **>(&(arguments[0]));
+#ifdef __APPLE__
+        GetCurrentProcess(&gGLUTAppPSN);
+#endif
         glutInit(&argc, argv);
         _glut_initialized = true;
     }
@@ -115,7 +129,9 @@
     /* Initialize freeglut */
 
     init_glut();
+#ifdef HAVE_GLUTSETOPTION
     glutSetOption(GLUT_ACTION_ON_WINDOW_CLOSE, GLUT_ACTION_CONTINUE_EXECUTION);
+#endif
     unsigned int display_mode = GLUT_RGBA | GLUT_DOUBLE;
     if (mode == stereo)
     {
@@ -908,7 +924,24 @@
         return;
     }
 
+#ifdef HAVE_GLUTCHECKLOOP
+#ifdef __APPLE__
+    //
+    // Post non-consequential UI event to prevent GLUT from blocking on event list in Snow Leopard
+    //
+    
+    CGEventRef mouseWheelEv=CGEventCreateScrollWheelEvent(NULL,kCGScrollEventUnitPixel,1,(int32_t) 0);
+    CGEventPostToPSN(&gGLUTAppPSN,mouseWheelEv);
+    CFRelease(mouseWheelEv);
+    
+    //
+    // .. now call glutCheckLoop and it won't hang in SL
+    //
+#endif
+    glutCheckLoop();
+#else
     glutMainLoopEvent();
+#endif
 }
 
 void video_output_opengl::close()
@@ -918,7 +951,9 @@
         glutSetCursor(GLUT_CURSOR_INHERIT);
         glutDestroyWindow(_window_id);
     }
+#ifdef HAVE_GLUTLEAVEMAINLOOP
     glutLeaveMainLoop();
+#endif
     global_video_output_gl = NULL;
 }
 
