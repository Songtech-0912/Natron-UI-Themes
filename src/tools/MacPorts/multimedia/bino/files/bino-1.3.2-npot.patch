--- bino/src/video_output.cpp	2012-04-06 14:17:05.000000000 +0200
+++ bino/src/video_output.cpp.npot	2012-04-06 14:10:56.000000000 +0200
@@ -97,6 +97,22 @@
     { { 0.0f, 0.0f }, { 1.0f, 0.0f }, { 1.0f, 1.0f }, { 0.0f, 1.0f } }
 };
 
+static inline unsigned int ilog2(unsigned int n)
+{
+    int l = 0;
+    while (n != 0) {
+        n = n >> 1;
+        l++;
+    }
+    return l - 1;
+}
+
+static inline unsigned int nextpot(unsigned int n) {
+    /* compute the dimensions which are powers of 2 and can contain the image */
+    unsigned int pow2 = ilog2(n - 1) + 1;
+    return 1 << pow2;
+}
+
 static bool srgb8_textures_are_color_renderable(void)
 {
     bool retval = true;
@@ -345,7 +361,9 @@
 {
     if (!_initialized)
     {
-        /* currently nothing to do */
+        // are non-power-of-two textures available?
+	_textures_npot = GLEW_ARB_texture_non_power_of_two;
+
         _initialized = true;
     }
 }
@@ -403,6 +421,13 @@
     assert(xglCheckError(HERE));
     glGenBuffers(1, &_input_pbo);
     glGenFramebuffersEXT(1, &_input_fbo);
+    if (_textures_npot) {
+        _frame_width_nextpot = frame.width;
+        _frame_height_nextpot = frame.height;
+    } else {
+        _frame_width_nextpot = nextpot(frame.width);
+        _frame_height_nextpot = nextpot(frame.height);
+    }
     if (frame.layout == video_frame::bgra32)
     {
         for (int i = 0; i < (frame.stereo_layout == parameters::layout_mono ? 1 : 2); i++)
@@ -413,8 +438,8 @@
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
-            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB8, frame.width, frame.height,
-                    0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
+            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB8, _frame_width_nextpot, _frame_height_nextpot,
+                         0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
         }
     }
     else
@@ -445,9 +470,9 @@
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
             glTexImage2D(GL_TEXTURE_2D, 0, internal_format,
-                    frame.width,
-                    frame.height,
-                    0, GL_LUMINANCE, type, NULL);
+                         _frame_width_nextpot,
+                         _frame_height_nextpot,
+                         0, GL_LUMINANCE, type, NULL);
             glGenTextures(1, &(_input_yuv_u_tex[index][i]));
             glBindTexture(GL_TEXTURE_2D, _input_yuv_u_tex[index][i]);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, need_chroma_filtering ? GL_LINEAR : GL_NEAREST);
@@ -455,9 +480,9 @@
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
             glTexImage2D(GL_TEXTURE_2D, 0, internal_format,
-                    frame.width / _input_yuv_chroma_width_divisor[index],
-                    frame.height / _input_yuv_chroma_height_divisor[index],
-                    0, GL_LUMINANCE, type, NULL);
+                         _frame_width_nextpot / _input_yuv_chroma_width_divisor[index],
+                         _frame_height_nextpot / _input_yuv_chroma_height_divisor[index],
+                         0, GL_LUMINANCE, type, NULL);
             glGenTextures(1, &(_input_yuv_v_tex[index][i]));
             glBindTexture(GL_TEXTURE_2D, _input_yuv_v_tex[index][i]);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, need_chroma_filtering ? GL_LINEAR : GL_NEAREST);
@@ -465,9 +490,9 @@
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
             glTexImage2D(GL_TEXTURE_2D, 0, internal_format,
-                    frame.width / _input_yuv_chroma_width_divisor[index],
-                    frame.height / _input_yuv_chroma_height_divisor[index],
-                    0, GL_LUMINANCE, type, NULL);
+                         _frame_width_nextpot / _input_yuv_chroma_width_divisor[index],
+                         _frame_height_nextpot / _input_yuv_chroma_height_divisor[index],
+                         0, GL_LUMINANCE, type, NULL);
         }
     }
     assert(xglCheckError(HERE));
@@ -646,6 +671,14 @@
             height = frame.height;
         }
     }
+    int width_nextpot, height_nextpot;
+    if (_textures_npot) {
+        width_nextpot = width;
+        height_nextpot = height;
+    } else {
+        width_nextpot = nextpot(width);
+        height_nextpot = nextpot(height);
+    }
     if (subtitle.is_valid()
             && (subtitle != _input_subtitle_box[index]
                 || (!subtitle.is_constant() && frame.presentation_time != _input_subtitle_time[index])
@@ -663,8 +696,8 @@
 
         // Regenerate an appropriate subtitle texture if necessary.
         if (_input_subtitle_tex[index] == 0
-                || width != _input_subtitle_width[index]
-                || height != _input_subtitle_height[index])
+                || width_nextpot != _input_subtitle_width_nextpot[index]
+                || height_nextpot != _input_subtitle_height_nextpot[index])
         {
             if (_input_subtitle_tex[index] != 0)
             {
@@ -677,7 +710,7 @@
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
             glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8,
-                    width, height, 0,
+                    width_nextpot, height_nextpot, 0,
                     GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
         }
         // Clear the texture
@@ -726,6 +759,8 @@
     _input_subtitle_box[index] = subtitle;
     _input_subtitle_width[index] = width;
     _input_subtitle_height[index] = height;
+    _input_subtitle_width_nextpot[index] = width_nextpot;
+    _input_subtitle_height_nextpot[index] = height_nextpot;
     _input_subtitle_time[index] = frame.presentation_time;
     _input_subtitle_params = params;
     assert(xglCheckError(HERE));
@@ -828,6 +863,13 @@
     str::replace(color_fs_src, "$storage", storage_str);
     _color_prg = xglCreateProgram("video_output_color", "", color_fs_src);
     xglLinkProgram("video_output_color", _color_prg);
+    if (_textures_npot) {
+        _frame_width_nextpot = frame.width;
+        _frame_height_nextpot = frame.height;
+    } else {
+        _frame_width_nextpot = nextpot(frame.width);
+        _frame_height_nextpot = nextpot(frame.height);
+    }
     for (int i = 0; i < (frame.stereo_layout == parameters::layout_mono ? 1 : 2); i++)
     {
         glGenTextures(1, &(_color_tex[i]));
@@ -838,7 +880,7 @@
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);
         glTexImage2D(GL_TEXTURE_2D, 0,
                 storage_str == "storage_srgb" ? GL_SRGB8 : GL_RGB16,
-                frame.width, frame.height, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
+                _frame_width_nextpot, _frame_height_nextpot, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
     }
     assert(xglCheckError(HERE));
 }
@@ -1408,6 +1450,19 @@
     }
 }
 
+static void adjust_tex_coords_for_pot(float tc[4][2],
+                                      unsigned int width, unsigned int height,
+                                      unsigned int width_nextpot, unsigned int height_nextpot)
+{
+  const float xfac = width/(float)width_nextpot;
+  const float yfac = height/(float)height_nextpot;
+
+  for (int i=0; i<4; ++i) {
+      tc[i][0] *= xfac;
+      tc[i][1] *= yfac;
+  }
+}
+
 void video_output::reshape(int w, int h)
 {
     // Clear
@@ -1444,6 +1499,9 @@
         compute_viewport_and_tex_coords(_viewport[0], _tex_coords[0], src_ar,
                 w / 2, h, dst_w, dst_h, dst_ar,
                 crop_ar, _params.zoom());
+        if (!_textures_npot) {
+            adjust_tex_coords_for_pot(_tex_coords[0], _frame[_active_index].width, _frame[_active_index].height, _frame_width_nextpot, _frame_height_nextpot);
+        }
         std::memcpy(_viewport[1], _viewport[0], sizeof(_viewport[1]));
         _viewport[1][0] = _viewport[0][0] + w / 2;
         std::memcpy(_tex_coords[1], _tex_coords[0], sizeof(_tex_coords[1]));
@@ -1464,6 +1522,9 @@
         compute_viewport_and_tex_coords(_viewport[0], _tex_coords[0], src_ar,
                 w, h / 2, dst_w, dst_h, dst_ar,
                 crop_ar, _params.zoom());
+        if (!_textures_npot) {
+            adjust_tex_coords_for_pot(_tex_coords[0], _frame[_active_index].width, _frame[_active_index].height, _frame_width_nextpot, _frame_height_nextpot);
+        }
         std::memcpy(_viewport[1], _viewport[0], sizeof(_viewport[1]));
         _viewport[0][1] = _viewport[1][1] + h / 2;
         std::memcpy(_tex_coords[1], _tex_coords[0], sizeof(_tex_coords[1]));
@@ -1485,6 +1546,9 @@
         compute_viewport_and_tex_coords(_viewport[0], _tex_coords[0], src_ar,
                 w, (h - blank_lines) / 2, dst_w, dst_h, dst_ar,
                 _params.crop_aspect_ratio(), _params.zoom());
+        if (!_textures_npot) {
+            adjust_tex_coords_for_pot(_tex_coords[0], _frame[_active_index].width, _frame[_active_index].height, _frame_width_nextpot, _frame_height_nextpot);
+        }
         std::memcpy(_viewport[1], _viewport[0], sizeof(_viewport[1]));
         _viewport[0][1] = _viewport[1][1] + (h - blank_lines) / 2 + blank_lines;
         std::memcpy(_tex_coords[1], _tex_coords[0], sizeof(_tex_coords[1]));
@@ -1498,7 +1562,10 @@
         compute_viewport_and_tex_coords(_viewport[0], _tex_coords[0], src_ar,
                 w, h, dst_w, dst_h, dst_ar,
                 _params.crop_aspect_ratio(), _params.zoom());
-        std::memcpy(_viewport[1], _viewport[0], sizeof(_viewport[1]));
+        if (!_textures_npot) {
+            adjust_tex_coords_for_pot(_tex_coords[0], _frame[_active_index].width, _frame[_active_index].height, _frame_width_nextpot, _frame_height_nextpot);
+        }
+std::memcpy(_viewport[1], _viewport[0], sizeof(_viewport[1]));
         std::memcpy(_tex_coords[1], _tex_coords[0], sizeof(_tex_coords[1]));
     }
 }
--- bino/src/video_output.h	2012-04-06 14:16:25.000000000 +0200
+++ bino/src/video_output.h.npot	2012-04-06 14:11:40.000000000 +0200
@@ -37,6 +37,7 @@
 {
 private:
     bool _initialized;
+    bool _textures_npot;
 
     /* We manage two frames, each with its own set of properties etc.
      * The active frame is the one that is displayed, the other frame is the one
@@ -45,6 +46,8 @@
     int _active_index;                                  // 0 or 1
 
     video_frame _frame[2];              // input frames (active / preparing)
+    int _frame_width_nextpot;
+    int _frame_height_nextpot;
     parameters _params;                 // current parameters for display
     // Step 1: input of video data
     GLuint _input_pbo;                  // pixel-buffer object for texture uploading
@@ -54,6 +57,8 @@
     GLuint _input_yuv_v_tex[2][2];      // for yuv formats: v component
     GLuint _input_bgra32_tex[2][2];     // for bgra32 format
     GLuint _input_subtitle_tex[2];      // for subtitles
+    int _input_subtitle_width_nextpot[2];
+    int _input_subtitle_height_nextpot[2];
     subtitle_box _input_subtitle_box[2];// the subtitle box currently stored in the texture
     int _input_subtitle_width[2];       // the width of the current subtitle texture
     int _input_subtitle_height[2];      // the height of the current subtitle texture
