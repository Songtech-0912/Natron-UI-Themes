--- a/src/decoder_ffmpeg.cpp	2012-07-05 16:54:54.000000000 +0200
+++ b/src/decoder_ffmpeg.cpp	2012-07-05 17:22:54.000000000 +0200
@@ -47,6 +47,123 @@
 
 #include "decoder_ffmpeg.h"
 
+// Defaults to libav compatibility, uncomment (when building with msvc) to force ffmpeg compatibility.
+//#define FFMS_USE_FFMPEG_COMPAT
+
+// Attempt to auto-detect whether or not we are using ffmpeg.  Newer versions of ffmpeg have their micro versions 100+
+#if LIBAVFORMAT_VERSION_MICRO > 99 || LIBAVUTIL_VERSION_MICRO > 99 || LIBAVCODEC_VERSION_MICRO > 99 || LIBSWSCALE_VERSION_MICRO > 99
+#ifndef FFMS_USE_FFMPEG_COMPAT
+#define FFMS_USE_FFMPEG_COMPAT
+#endif
+#endif
+
+// Helper to handle checking for different versions in libav and ffmpeg
+// First version is required libav versio, second is required ffmpeg version
+#ifdef FFMS_USE_FFMPEG_COMPAT
+#  define VERSION_CHECK(LIB, cmp, u1, u2, u3, major, minor, micro) ((LIB) cmp (AV_VERSION_INT(major, minor, micro)))
+#else
+#  define VERSION_CHECK(LIB, cmp, major, minor, micro, u1, u2, u3) ((LIB) cmp (AV_VERSION_INT(major, minor, micro)))
+#endif
+
+// Compatibility with older/newer ffmpegs
+#ifdef LIBAVFORMAT_VERSION_INT
+#	if (LIBAVFORMAT_VERSION_INT) < (AV_VERSION_INT(53,2,0))
+#		define avformat_open_input(c,s,f,o) av_open_input_file(c,s,f,0,o) // this works because the parameters/options are not used
+#	endif
+#	if (LIBAVFORMAT_VERSION_INT) < (AV_VERSION_INT(53,3,0))
+#		define avformat_find_stream_info(c,o) av_find_stream_info(c)
+#	endif
+#	if VERSION_CHECK(LIBAVFORMAT_VERSION_INT, <, 53, 17, 0, 53, 25, 0)
+#		define avformat_close_input(c) av_close_input_file(*c)
+#	endif
+#   if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(53, 10, 0)
+#		define avformat_new_stream(s,c) av_new_stream(s,c)
+#	endif
+#   if LIBAVFORMAT_VERSION_INT <= AV_VERSION_INT(52,101,0)
+#       define av_dump_format dump_format
+#   endif
+#   if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(52, 45, 0)
+#       define av_guess_format guess_format
+#   endif
+#   if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(52,111,0)
+#       define avformat_write_header av_write_header
+#   endif
+#   if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(52, 105, 0)
+#       define avio_open url_fopen
+#       define avio_close url_fclose
+#   endif
+#   if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(52, 107, 0)
+#       define AVIO_FLAG_WRITE URL_WRONLY
+#   endif
+#endif
+
+#ifdef LIBAVCODEC_VERSION_INT
+#	if (LIBAVCODEC_VERSION_INT) >= (AV_VERSION_INT(52,94,3)) // there are ~3 revisions where this will break but fixing that is :effort:
+#		undef SampleFormat
+#	else
+#		define AVSampleFormat SampleFormat
+#		define av_get_bits_per_sample_fmt av_get_bits_per_sample_format
+#		define AV_SAMPLE_FMT_U8		SAMPLE_FMT_U8
+#		define AV_SAMPLE_FMT_S16	SAMPLE_FMT_S16
+#		define AV_SAMPLE_FMT_S32	SAMPLE_FMT_S32
+#		define AV_SAMPLE_FMT_FLT	SAMPLE_FMT_FLT
+#		define AV_SAMPLE_FMT_DBL	SAMPLE_FMT_DBL
+#	endif
+#	if (LIBAVCODEC_VERSION_INT) < (AV_VERSION_INT(53,6,0))
+#		define avcodec_open2(a,c,o) avcodec_open(a,c)
+#		define avcodec_alloc_context3(c) avcodec_alloc_context()
+#	endif
+#   if LIBAVCODEC_VERSION_INT < AV_VERSION_INT(52, 30, 2)
+#       define AV_PKT_FLAG_KEY PKT_FLAG_KEY
+#   endif
+#   if LIBAVCODEC_VERSION_INT < AV_VERSION_INT(52, 64, 0)
+#       define AVMediaType CodecType
+#       define AVMEDIA_TYPE_UNKNOWN CODEC_TYPE_UNKNOWN
+#       define AVMEDIA_TYPE_VIDEO CODEC_TYPE_VIDEO
+#       define AVMEDIA_TYPE_AUDIO CODEC_TYPE_AUDIO
+#       define AVMEDIA_TYPE_DATA CODEC_TYPE_DATA
+#       define AVMEDIA_TYPE_SUBTITLE CODEC_TYPE_SUBTITLE
+#       define AVMEDIA_TYPE_ATTACHMENT CODEC_TYPE_ATTACHMENT
+#       define AVMEDIA_TYPE_NB CODEC_TYPE_NB
+#   endif
+#   if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(52, 112, 0)
+#       define avcodec_thread_init(c,n) (0)
+#   endif
+#endif
+
+#ifdef LIBAVUTIL_VERSION_INT
+#	if (LIBAVUTIL_VERSION_INT) < (AV_VERSION_INT(51, 1, 0))
+#		define av_get_picture_type_char av_get_pict_type_char
+#		define AV_PICTURE_TYPE_B FF_B_TYPE
+#	endif
+#	if (LIBAVUTIL_VERSION_INT) < (AV_VERSION_INT(51, 2, 0))
+#		define av_get_pix_fmt_name avcodec_get_pix_fmt_name
+#	endif
+#	if (LIBAVUTIL_VERSION_INT) < (AV_VERSION_INT(51, 4, 0))
+#		define av_get_bytes_per_sample(a) (av_get_bits_per_sample_fmt(a) / 8)
+#	endif
+#	if (LIBAVUTIL_VERSION_INT) < (AV_VERSION_INT(51, 12, 0))
+#		define av_set_opt_int(o,n,v,s) av_set_int(o,n,v)
+#	endif
+#   if LIBAVUTIL_VERSION_INT < AV_VERSION_INT(51, 5, 0)
+#       define AV_DICT_IGNORE_SUFFIX AV_METADATA_IGNORE_SUFFIX
+#       define AV_DICT_DONT_OVERWRITE AV_METADATA_DONT_OVERWRITE
+#       define AVDictionaryEntry AVMetadataTag
+#       define av_dict_get av_metadata_get
+#       define av_dict_set av_metadata_set2
+#       define av_dict_free av_metadata_free
+#   else
+#       define av_metadata_conv(ctx, d_conv, s_conv)
+#   endif
+#endif
+#ifdef AVERROR 
+#define AVERROR_IO AVERROR(EIO) 
+#define AVERROR_NUMEXPECTED AVERROR(EDOM) 
+#define AVERROR_NOMEM AVERROR(ENOMEM) 
+#define AVERROR_NOFMT AVERROR(EILSEQ) 
+#define AVERROR_NOTSUPP AVERROR(ENOSYS) 
+#define AVERROR_NOENT AVERROR(ENOENT) 
+#endif
 
 /* Hide the FFmpeg stuff so that their header files cannot cause problems
  * in other source files. */
@@ -102,9 +219,9 @@
         {
             n = 1;
         }
-        else if (n > 64)
+        else if (n > 16)
         {
-            n = 64;
+            n = 16;
         }
     }
     return n;
@@ -207,22 +324,22 @@
     _filename = filename;
     _stuff = new stuff_t;
 
-    if ((e = av_open_input_file(&_stuff->format_ctx, filename.c_str(), NULL, 0, NULL)) != 0)
+    _stuff->format_ctx = NULL; if ((e = avformat_open_input(&_stuff->format_ctx, filename.c_str(), NULL, NULL)) != 0)
     {
         throw exc(filename + ": " + my_av_strerror(e));
     }
-    if ((e = av_find_stream_info(_stuff->format_ctx)) < 0)
+    if ((e = avformat_find_stream_info(_stuff->format_ctx,0)) < 0)
     {
         throw exc(filename + ": cannot read stream info: " + my_av_strerror(e));
     }
-    dump_format(_stuff->format_ctx, 0, filename.c_str(), 0);
+    av_dump_format(_stuff->format_ctx, 0, filename.c_str(), 0);
     _stuff->pos = std::numeric_limits<int64_t>::min();
 
     for (unsigned int i = 0; i < _stuff->format_ctx->nb_streams
             && i < static_cast<unsigned int>(std::numeric_limits<int>::max()); i++)
     {
         _stuff->format_ctx->streams[i]->discard = AVDISCARD_ALL;        // ignore by default; user must activate streams
-        if (_stuff->format_ctx->streams[i]->codec->codec_type == CODEC_TYPE_VIDEO)
+        if (_stuff->format_ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO)
         {
             _stuff->video_streams.push_back(i);
             int j = _stuff->video_streams.size() - 1;
@@ -242,7 +359,13 @@
             {
                 throw exc(filename + " stream " + str::from(i) + ": unsupported video codec");
             }
-            if ((e = avcodec_open(_stuff->video_codec_ctxs[j], _stuff->video_codecs[j])) < 0)
+	    // Set CODEC_FLAG_EMU_EDGE in the same situations in which ffplay sets it.
+            // I don't know what exactly this does, but it is necessary to fix the problem
+            // described in this thread: http://lists.nongnu.org/archive/html/bino-list/2012-02/msg00039.html
+            if (_stuff->video_codec_ctxs[j]->lowres || (_stuff->video_codecs[j] && (_stuff->video_codecs[j]->capabilities & CODEC_CAP_DR1)))
+	      _stuff->video_codec_ctxs[j]->flags |= CODEC_FLAG_EMU_EDGE;
+
+            if ((e = avcodec_open2(_stuff->video_codec_ctxs[j], _stuff->video_codecs[j], NULL)) < 0)
             {
                 _stuff->video_codecs[j] = NULL;
                 throw exc(filename + " stream " + str::from(i) + ": cannot open video codec: " + my_av_strerror(e));
@@ -270,7 +393,7 @@
             }
             _stuff->video_pos_offsets.push_back(std::numeric_limits<int64_t>::min());
         }
-        else if (_stuff->format_ctx->streams[i]->codec->codec_type == CODEC_TYPE_AUDIO)
+        else if (_stuff->format_ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO)
         {
             _stuff->audio_streams.push_back(i);
             int j = _stuff->audio_streams.size() - 1;
@@ -281,24 +404,24 @@
             {
                 throw exc(filename + " stream " + str::from(i) + ": unsupported audio codec");
             }
-            if ((e = avcodec_open(_stuff->audio_codec_ctxs[j], _stuff->audio_codecs[j])) < 0)
+            if ((e = avcodec_open2(_stuff->audio_codec_ctxs[j], _stuff->audio_codecs[j], NULL)) < 0)
             {
                 _stuff->audio_codecs[j] = NULL;
                 throw exc(filename + " stream " + str::from(i) + ": cannot open audio codec: " + my_av_strerror(e));
             }
-            if (_stuff->audio_codec_ctxs[j]->sample_fmt == SAMPLE_FMT_U8)
+            if (_stuff->audio_codec_ctxs[j]->sample_fmt == AV_SAMPLE_FMT_U8)
             {
                 _stuff->audio_sample_formats.push_back(audio_sample_u8);
             }
-            else if (_stuff->audio_codec_ctxs[j]->sample_fmt == SAMPLE_FMT_S16)
+            else if (_stuff->audio_codec_ctxs[j]->sample_fmt == AV_SAMPLE_FMT_S16)
             {
                 _stuff->audio_sample_formats.push_back(audio_sample_s16);
             }
-            else if (_stuff->audio_codec_ctxs[j]->sample_fmt == SAMPLE_FMT_FLT)
+            else if (_stuff->audio_codec_ctxs[j]->sample_fmt == AV_SAMPLE_FMT_FLT)
             {
                 _stuff->audio_sample_formats.push_back(audio_sample_f32);
             }
-            else if (_stuff->audio_codec_ctxs[j]->sample_fmt == SAMPLE_FMT_DBL)
+            else if (_stuff->audio_codec_ctxs[j]->sample_fmt == AV_SAMPLE_FMT_DBL)
             {
                 _stuff->audio_sample_formats.push_back(audio_sample_d64);
             }
@@ -332,8 +455,8 @@
     _stuff->audio_packet_queues.resize(audio_streams());
 
     /* Metadata */
-    AVMetadataTag *tag = NULL;
-    while ((tag = av_metadata_get(_stuff->format_ctx->metadata, "", tag, AV_METADATA_IGNORE_SUFFIX)))
+    AVDictionaryEntry *tag = NULL;
+    while ((tag = av_dict_get(_stuff->format_ctx->metadata, "", tag, AV_DICT_IGNORE_SUFFIX)))
     {
         _tag_names.push_back(tag->key);
         _tag_values.push_back(tag->value);
@@ -677,7 +800,7 @@
             {
                 // Manage tmpbuf with av_malloc/av_free, to guarantee correct alignment.
                 // Not doing this results in hard to debug crashes on some systems.
-                int tmpbuf_size = (AVCODEC_MAX_AUDIO_FRAME_SIZE * 3) / 2;
+                int tmpbuf_size = (AVCODEC_MAX_AUDIO_FRAME_SIZE * 3) / 2 + 16;
                 unsigned char *tmpbuf = static_cast<unsigned char *>(av_malloc(tmpbuf_size));
                 int len = avcodec_decode_audio3(_stuff->audio_codec_ctxs[audio_stream],
                         reinterpret_cast<int16_t *>(&(tmpbuf[0])), &tmpbuf_size, &tmppacket);
@@ -804,7 +927,7 @@
     }
     if (_stuff->format_ctx)
     {
-        av_close_input_file(_stuff->format_ctx);
+        avformat_close_input(&_stuff->format_ctx);
     }
     delete _stuff;
     _stuff = NULL;
