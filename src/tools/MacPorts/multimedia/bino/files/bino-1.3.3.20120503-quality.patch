diff --git a/src/dispatch.cpp b/src/dispatch.cpp
index 72294fb..ab7b444 100644
--- a/src/dispatch.cpp
+++ b/src/dispatch.cpp
@@ -672,6 +672,10 @@ void dispatch::receive_cmd(const command& cmd)
         _parameters.set_zoom(clamp(s11n::load<float>(p), 0.0f, 1.0f));
         notify_all(notification::zoom);
         break;
+    case command::set_quality:
+        _parameters.set_quality(s11n::load<int>(p));
+        notify_all(notification::quality);
+        break;
     case command::set_loop_mode:
         _parameters.set_loop_mode(static_cast<parameters::loop_mode_t>(s11n::load<int>(p)));
         notify_all(notification::loop_mode);
@@ -1122,6 +1126,9 @@ bool dispatch::parse_command(const std::string& s, command* c)
     } else if (tokens.size() == 2 && tokens[0] == "adjust-saturation"
             && str::to(tokens[1], &p.f)) {
         *c = command(command::adjust_saturation, p.f);
+    } else if (tokens.size() == 2 && tokens[0] == "set-quality"
+            && str::to(tokens[1], &p.i)) {
+        *c = command(command::set_quality, p.i);
     } else if (tokens.size() == 2 && tokens[0] == "set-zoom"
             && str::to(tokens[1], &p.f)) {
         *c = command(command::set_zoom, p.f);
diff --git a/src/dispatch.h b/src/dispatch.h
index bc4a759..b6b5347 100644
--- a/src/dispatch.h
+++ b/src/dispatch.h
@@ -110,6 +110,7 @@ public:
         set_saturation,                 // float (absolute value)
         adjust_saturation,              // float (relative adjustment)
         set_zoom,                       // float (absolute value)
+        set_quality,                    // int (absolute value)
         adjust_zoom,                    // float (relative adjustment)
         set_loop_mode,                  // parameters::loop_mode_t
         set_audio_delay,                // float (absolute value)
@@ -232,6 +233,7 @@ public:
         hue,
         saturation,
         zoom,
+        quality,
         loop_mode,
         audio_delay,
         subtitle_encoding,
diff --git a/src/gui.cpp b/src/gui.cpp
index 3be7b63..fe5b683 100644
--- a/src/gui.cpp
+++ b/src/gui.cpp
@@ -1269,6 +1269,16 @@ color_dialog::color_dialog(QWidget *parent) : QDialog(parent), _lock(false)
     _s_spinbox->setDecimals(2);
     _s_spinbox->setSingleStep(0.01);
     connect(_s_spinbox, SIGNAL(valueChanged(double)), this, SLOT(s_spinbox_changed(double)));
+    QLabel *q_label = new QLabel(_("Quality:"));
+    _q_slider = new QSlider(Qt::Horizontal);
+    _q_slider->setRange(0, 4);
+    _q_slider->setValue(dispatch::parameters().quality());
+    connect(_q_slider, SIGNAL(valueChanged(int)), this, SLOT(q_changed(int)));
+    _q_spinbox = new QSpinBox();
+    _q_spinbox->setRange(0, 4);
+    _q_spinbox->setSingleStep(1);
+    _q_spinbox->setValue(dispatch::parameters().quality());
+    connect(_q_spinbox, SIGNAL(valueChanged(int)), this, SLOT(q_changed(int)));
 
     QPushButton *ok_button = new QPushButton(_("OK"));
     connect(ok_button, SIGNAL(clicked()), this, SLOT(close()));
@@ -1286,7 +1296,10 @@ color_dialog::color_dialog(QWidget *parent) : QDialog(parent), _lock(false)
     layout->addWidget(s_label, 3, 0);
     layout->addWidget(_s_slider, 3, 1);
     layout->addWidget(_s_spinbox, 3, 2);
-    layout->addWidget(ok_button, 4, 0, 1, 3);
+    layout->addWidget(q_label, 4, 0);
+    layout->addWidget(_q_slider, 4, 1);
+    layout->addWidget(_q_spinbox, 4, 2);
+    layout->addWidget(ok_button, 5, 0, 1, 3);
     setLayout(layout);
 }
 
@@ -1338,6 +1351,12 @@ void color_dialog::s_spinbox_changed(double val)
         send_cmd(command::set_saturation, static_cast<float>(val));
 }
 
+void color_dialog::q_changed(int val)
+{
+    if (!_lock)
+        send_cmd(command::set_quality, val);
+}
+
 void color_dialog::receive_notification(const notification &note)
 {
     switch (note.type)
@@ -1366,6 +1385,12 @@ void color_dialog::receive_notification(const notification &note)
         _s_spinbox->setValue(dispatch::parameters().saturation());
         _lock = false;
         break;
+    case notification::quality:
+        _lock = true;
+        _q_slider->setValue(dispatch::parameters().quality());
+        _q_spinbox->setValue(dispatch::parameters().quality());
+        _lock = false;
+        break;
     default:
         /* not handled */
         break;
@@ -2733,6 +2758,8 @@ main_window::main_window(QSettings *settings) :
             send_cmd(command::set_hue, session_params.hue());
         if (!dispatch::parameters().saturation_is_set() && !session_params.saturation_is_default())
             send_cmd(command::set_saturation, session_params.saturation());
+        if (!dispatch::parameters().quality_is_set() && !session_params.quality_is_default())
+            send_cmd(command::set_quality, session_params.quality());
         if (!dispatch::parameters().crosstalk_r_is_set()
                 && !dispatch::parameters().crosstalk_g_is_set()
                 && !dispatch::parameters().crosstalk_b_is_set()
@@ -2820,6 +2847,11 @@ main_window::main_window(QSettings *settings) :
             send_cmd(command::set_saturation, _settings->value("saturation").toFloat());
             _settings->remove("saturation");
         }
+        if (!dispatch::parameters().quality_is_set() && _settings->contains("quality"))
+        {
+            send_cmd(command::set_quality, _settings->value("quality").toInt());
+            _settings->remove("quality");
+        }
         if (!dispatch::parameters().crosstalk_r_is_set()
                 && !dispatch::parameters().crosstalk_g_is_set()
                 && !dispatch::parameters().crosstalk_b_is_set()
diff --git a/src/gui.h b/src/gui.h
index 85bae71..79e7e49 100644
--- a/src/gui.h
+++ b/src/gui.h
@@ -178,6 +178,8 @@ private:
     QSlider *_h_slider;
     QDoubleSpinBox *_s_spinbox;
     QSlider *_s_slider;
+    QSpinBox *_q_spinbox;
+    QSlider *_q_slider;
 
 private slots:
     void c_slider_changed(int val);
@@ -188,6 +190,7 @@ private slots:
     void h_spinbox_changed(double val);
     void s_slider_changed(int val);
     void s_spinbox_changed(double val);
+    void q_changed(int val);
 
 public:
     color_dialog(QWidget *parent);
diff --git a/src/main.cpp b/src/main.cpp
index 61d5f41..791feb8 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -320,6 +320,8 @@ int main(int argc, char *argv[])
     options.push_back(&benchmark);
     opt::val<int> swap_interval("swap-interval", '\0', opt::optional, 0, 999);
     options.push_back(&swap_interval);
+    opt::val<int> quality("quality", 'Q', opt::optional, 0, 4);
+    options.push_back(&quality);
     opt::flag loop("loop", 'l', opt::optional);
     options.push_back(&loop);
 #if HAVE_LIBXNVCTRL
@@ -482,6 +484,7 @@ int main(int argc, char *argv[])
                 + "  --crosstalk=VAL          " + _("Crosstalk leak level (0 to 1).") + '\n'
                 + "                           " + _("Comma-separated values for R,G,B.") + '\n'
                 + "  --ghostbust=VAL          " + _("Amount of ghostbusting to apply (0 to 1).") + '\n'
+                + "  -Q|--quality=VAL         " + _("Video rendering quality (0=fastest to 4=highest).") + '\n'
                 + "  -b|--benchmark           " + _("Benchmark mode (no audio, show fps).") + '\n'
                 + "  --swap-interval=D        " + _("Frame rate divisor for display refresh rate.") + '\n'
                 + "                           " + _("Default is 0 for benchmark mode, 1 otherwise.") + '\n'
@@ -636,6 +639,8 @@ int main(int argc, char *argv[])
         controller::send_cmd(command::set_fullscreen_3d_ready_sync, fullscreen_3d_ready_sync.value());
     if (zoom.is_set())
         controller::send_cmd(command::set_zoom, zoom.value());
+    if (quality.is_set())
+        controller::send_cmd(command::set_quality, quality.value());
     if (loop.is_set())
         controller::send_cmd(command::set_loop_mode, loop.value() ? parameters::loop_current : parameters::no_loop);
     if (audio_delay.is_set())
diff --git a/src/media_data.cpp b/src/media_data.cpp
index e490dcc..33d8c68 100644
--- a/src/media_data.cpp
+++ b/src/media_data.cpp
@@ -99,6 +99,7 @@ parameters::parameters()
     unset_hue();
     unset_saturation();
     unset_zoom();
+    unset_quality();
     unset_loop_mode();
     unset_audio_delay();
     unset_subtitle_encoding();
@@ -152,6 +153,7 @@ const float parameters::_brightness_default = 0.0f;
 const float parameters::_hue_default = 0.0f;
 const float parameters::_saturation_default = 0.0f;
 const float parameters::_zoom_default = 0.0f;
+const int parameters::_quality_default = 4;
 const parameters::loop_mode_t parameters::_loop_mode_default = no_loop;
 const int64_t parameters::_audio_delay_default = 0;
 const std::string parameters::_subtitle_encoding_default = "";
@@ -523,6 +525,8 @@ void parameters::save(std::ostream &os) const
     s11n::save(os, _saturation_set);
     s11n::save(os, _zoom);
     s11n::save(os, _zoom_set);
+    s11n::save(os, _quality);
+    s11n::save(os, _quality_set);
     s11n::save(os, static_cast<int>(_loop_mode));
     s11n::save(os, _loop_mode_set);
     s11n::save(os, _audio_delay);
@@ -624,6 +628,8 @@ void parameters::load(std::istream &is)
     s11n::load(is, _saturation_set);
     s11n::load(is, _zoom);
     s11n::load(is, _zoom_set);
+    s11n::load(is, _quality);
+    s11n::load(is, _quality_set);
     s11n::load(is, x); _loop_mode = static_cast<loop_mode_t>(x);
     s11n::load(is, _loop_mode_set);
     s11n::load(is, _audio_delay);
@@ -715,6 +721,8 @@ std::string parameters::save_session_parameters() const
         s11n::save(oss, "saturation", saturation());
     if (!zoom_is_default())
         s11n::save(oss, "zoom", zoom());
+    if (!quality_is_default())
+        s11n::save(oss, "quality", quality());
     if (!loop_mode_is_default())
         s11n::save(oss, "loop_mode", loop_mode_to_string(loop_mode()));
     if (!audio_delay_is_default())
@@ -802,6 +810,9 @@ void parameters::load_session_parameters(const std::string &s)
         } else if (name == "zoom") {
             s11n::load(value, _zoom);
             _zoom_set = true;
+        } else if (name == "quality") {
+            s11n::load(value, _quality);
+            _quality_set = true;
         } else if (name == "loop_mode") {
             std::string s;
             s11n::load(value, s);
diff --git a/src/media_data.h b/src/media_data.h
index f233ed9..8256dfa 100644
--- a/src/media_data.h
+++ b/src/media_data.h
@@ -179,6 +179,7 @@ public:
     PARAMETER(float, hue)                     // Hue adjustment, -1 .. +1
     PARAMETER(float, saturation)              // Saturation adjustment, -1 .. +1
     PARAMETER(float, zoom)                    // Zoom, 0 = off (show full video width) .. 1 = full (use full screen height)
+    PARAMETER(int, quality)                   // Video rendering quality, 0 .. 4
     PARAMETER(loop_mode_t, loop_mode)         // Current loop behaviour.
     PARAMETER(int64_t, audio_delay)           // Audio delay in microseconds
     PARAMETER(std::string, subtitle_encoding) // Subtitle encoding, empty means keep default
diff --git a/src/video_output.cpp b/src/video_output.cpp
index 05a8fe6..6053a41 100644
--- a/src/video_output.cpp
+++ b/src/video_output.cpp
@@ -831,6 +831,12 @@ void video_output::color_init(int index, const video_frame &frame)
         storage_str = "storage_linear_rgb";
     }
 
+    std::string quality_str = str::from(_quality);
+    if (_quality == 0)
+    {
+        // use RGB8 textures as if they were sRGB, without linearization/delinearization
+        storage_str = "storage_linear_srgb";
+    }
     std::string color_fs_src(VIDEO_OUTPUT_COLOR_FS_GLSL_STR);
     str::replace(color_fs_src, "$layout", layout_str);
     str::replace(color_fs_src, "$color_space", color_space_str);
@@ -838,8 +844,14 @@ void video_output::color_init(int index, const video_frame &frame)
     str::replace(color_fs_src, "$chroma_offset_x", chroma_offset_x_str);
     str::replace(color_fs_src, "$chroma_offset_y", chroma_offset_y_str);
     str::replace(color_fs_src, "$storage", storage_str);
+    str::replace(color_fs_src, "$quality", quality_str);
     _color_prg[index] = xglCreateProgram("video_output_color", "", color_fs_src);
     xglLinkProgram("video_output_color", _color_prg[index]);
+    _color_internalformat[index] = storage_str == "storage_srgb" ? GL_SRGB8 :
+            storage_str == "storage_linear_srgbb" ? GL_RGB8 :
+            /* storage_str == "storage_linear_rgb" ? */ GL_RGB16;
+    msg::wrn("QUALITY %d",_quality);
+    msg::wrn("STORAGE %s",storage_str.c_str());
     for (int i = 0; i < (frame.stereo_layout == parameters::layout_mono ? 1 : 2); i++) {
         glGenTextures(1, &(_color_tex[index][i]));
         glBindTexture(GL_TEXTURE_2D, _color_tex[index][i]);
@@ -847,8 +859,7 @@ void video_output::color_init(int index, const video_frame &frame)
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);
-        glTexImage2D(GL_TEXTURE_2D, 0,
-                storage_str == "storage_srgb" ? GL_SRGB8 : GL_RGB16,
+        glTexImage2D(GL_TEXTURE_2D, 0, _color_internalformat[index],
                 frame.width, frame.height, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
     }
     xglCheckError(HERE);
@@ -870,6 +881,7 @@ void video_output::color_deinit(int index)
         }
     }
     _color_last_frame[index] = video_frame();
+    _color_last_quality[index] = _quality;
     xglCheckError(HERE);
 }
 
@@ -881,7 +893,8 @@ bool video_output::color_is_compatible(int index, const video_frame &current_fra
             && _color_last_frame[index].color_space == current_frame.color_space
             && _color_last_frame[index].value_range == current_frame.value_range
             && _color_last_frame[index].chroma_location == current_frame.chroma_location
-            && _color_last_frame[index].stereo_layout == current_frame.stereo_layout);
+            && _color_last_frame[index].stereo_layout == current_frame.stereo_layout
+            && _color_last_quality[index] == _quality);
 }
 
 void video_output::render_init()
@@ -909,11 +922,13 @@ void video_output::render_init()
     std::string subtitle_str = (render_needs_subtitle(_render_params) ? "subtitle_enabled" : "subtitle_disabled");
     std::string coloradjust_str = (render_needs_coloradjust(_render_params) ? "coloradjust_enabled" : "coloradjust_disabled");
     std::string ghostbust_str = (render_needs_ghostbust(_render_params) ? "ghostbust_enabled" : "ghostbust_disabled");
+    std::string quality_str = str::from(_quality);
     std::string render_fs_src(VIDEO_OUTPUT_RENDER_FS_GLSL_STR);
     str::replace(render_fs_src, "$mode", mode_str);
     str::replace(render_fs_src, "$subtitle", subtitle_str);
     str::replace(render_fs_src, "$coloradjust", coloradjust_str);
     str::replace(render_fs_src, "$ghostbust", ghostbust_str);
+    str::replace(render_fs_src, "$quality", quality_str);
     _render_prg = xglCreateProgram("video_output_render", "", render_fs_src);
     xglLinkProgram("video_output_render", _render_prg);
     uint32_t dummy_texture = 0;
@@ -966,6 +981,7 @@ void video_output::render_deinit()
     }
     _render_last_params = parameters();
     _render_last_frame = video_frame();
+    _render_last_quality = -1;
     xglCheckError(HERE);
 }
 
@@ -992,7 +1008,8 @@ bool video_output::render_is_compatible()
     return (_render_last_params.stereo_mode() == _render_params.stereo_mode()
             && render_needs_subtitle(_render_last_params) == render_needs_subtitle(_render_params)
             && render_needs_coloradjust(_render_last_params) == render_needs_coloradjust(_render_params)
-            && render_needs_ghostbust(_render_last_params) == render_needs_ghostbust(_render_params));
+            && render_needs_ghostbust(_render_last_params) == render_needs_ghostbust(_render_params)
+            && _render_last_quality == _quality /*_render_last_params.quality() == _render_params.quality()*/);
 }
 
 int video_output::full_display_width() const
@@ -1168,6 +1185,7 @@ void video_output::display_current_frame(
     }
     _render_last_params = _render_params;
     _render_last_frame = frame;
+    _render_last_quality = _quality;
 
     /* Use correct left and right view indices */
 
@@ -1511,10 +1529,14 @@ void video_output::prepare_next_frame(const video_frame &frame, const subtitle_b
 
     /* Step 2: color-correction */
 
+    // set the desired quality to the current parameter value
+    // we set it here because it has to be consistent beween prepare_next_frame() and display_current_frame()
+    _quality = _render_params.quality();
     if (!_color_prg[index] || !color_is_compatible(index, frame)) {
         color_deinit(index);
         color_init(index, frame);
         _color_last_frame[index] = frame;
+        _color_last_quality[index] = _quality;
     }
     int left = 0;
     int right = (frame.stereo_layout == parameters::layout_mono ? 0 : 1);
diff --git a/src/video_output.h b/src/video_output.h
index df7f92a..eed2393 100644
--- a/src/video_output.h
+++ b/src/video_output.h
@@ -66,11 +66,14 @@ private:
     subtitle_box _subtitle[2];          // the current subtitle box
     GLuint _subtitle_tex[2];            // subtitle texture
     bool _subtitle_tex_current[2];      // whether the subtitle tex contains the current subtitle buffer
+    int _quality;
     // Step 2: color space conversion and color correction
     video_frame _color_last_frame[2];   // last frame for this step; used for reinitialization check
     GLuint _color_prg[2];               // color space transformation, color adjustment
     GLuint _color_fbo;                  // framebuffer object to render into the sRGB texture
     GLuint _color_tex[2][2];            // output: SRGB8 or linear RGB16 texture
+    GLint _color_internalformat[2];     // the internalformat of textures
+    int _color_last_quality[2];         // quality setting on the previous call
     // Step 3: rendering
     parameters _render_params;          // current parameters for display
     parameters _render_last_params;     // last params for this step; used for reinitialization check
@@ -79,6 +82,10 @@ private:
     GLuint _render_dummy_tex;           // an empty subtitle texture
     GLuint _render_mask_tex;            // for the masking modes even-odd-{rows,columns}, checkerboard
     blob _3d_ready_sync_buf;            // for 3-D Ready Sync pixels
+    int _render_last_quality;           // quality setting on the previous call
+    bool _render_ghostbusting;          // is ghostbusting enabled in _render_prg?
+    bool _render_subtitle;              // is subtitle rendering enabled in _render_prg?
+    bool _render_adjust_color;          // is subtitle rendering enabled in _render_prg?
     // OpenGL viewports and tex coordinates for drawing the two views of the video frame
     GLint _full_viewport[4];
     GLint _viewport[2][4];
diff --git a/src/video_output_color.fs.glsl b/src/video_output_color.fs.glsl
index cd457b6..f279d8e 100644
--- a/src/video_output_color.fs.glsl
+++ b/src/video_output_color.fs.glsl
@@ -42,8 +42,16 @@
 
 // storage_srgb
 // storage_linear_rgb
+// storage_linear_srgb
 #define $storage
 
+// 0: no filtering in interlaced/checkerboard modes, no color adjustment, no ghostbusting, and sRGB is stored as RGB (no linearization/delinearization)
+// 1: no filtering in interlaced/checkerboard modes
+// 2: fast delinearization
+// 3: fast delinearization
+// 3: slower but exact delinearization
+#define quality $quality
+
 #if defined(layout_yuv_p)
 uniform sampler2D y_tex;
 uniform sampler2D u_tex;
@@ -52,6 +60,11 @@ uniform sampler2D v_tex;
 uniform sampler2D srgb_tex;
 #endif
 
+#if defined(storage_linear_srgb) && (quality != 0)
+#error "unexpected quality setting"
+#endif
+
+#if !defined(layout_bgra32)
 /* The YUV triplets used internally in this shader use the following
  * conventions:
  * - All three components are in the range [0,1]
@@ -86,6 +99,7 @@ vec3 yuv_to_srgb(vec3 yuv)
     return m * (yuv - vec3(0.0, 0.5, 0.5));
 #endif
 }
+#endif //!layout_bgra32
 
 #if defined(storage_linear_rgb)
 // See GL_ARB_framebuffer_sRGB extension
@@ -122,7 +136,7 @@ vec3 get_srgb(vec2 tex_coord)
 void main()
 {
     vec3 srgb = get_srgb(gl_TexCoord[0].xy);
-#if defined(storage_srgb)
+#if defined(storage_srgb) || defined(storage_linear_srgb)
     gl_FragColor = vec4(srgb, 1.0);
 #else
     vec3 rgb = srgb_to_rgb(srgb);
diff --git a/src/video_output_render.fs.glsl b/src/video_output_render.fs.glsl
index 14e0f40..b9b6249 100644
--- a/src/video_output_render.fs.glsl
+++ b/src/video_output_render.fs.glsl
@@ -53,6 +53,13 @@
 // ghostbust_disabled
 #define $ghostbust
 
+// 0: no filtering in interlaced/checkerboard modes, no color adjustment, no ghostbusting, and sRGB is stored as RGB (no linearization/delinearization)
+// 1: no filtering in interlaced/checkerboard modes
+// 2: fast delinearization
+// 3: fast delinearization
+// 3: slower but exact delinearization
+#define quality $quality
+
 uniform sampler2D rgb_l;
 uniform sampler2D rgb_r;
 uniform float parallax;
@@ -89,6 +96,17 @@ float srgb_to_lum(vec3 srgb)
 }
 #endif
 
+#if quality == 0
+
+// sRGB texture stored into RGB: no delinearization is necessary
+#  define rgb_to_srgb(rgb) rgb
+#  define ghostbust(original,other) original
+// adjust_rgb performs linearization/delinearization, so disable it too
+#  define adjust_color(rgb) rgb
+
+#else // quality != 0
+
+#  if quality >= 4
 float linear_to_nonlinear(float x)
 {
     return (x <= 0.0031308 ? (x * 12.92) : (1.055 * pow(x, 1.0 / 2.4) - 0.055));
@@ -96,22 +114,19 @@ float linear_to_nonlinear(float x)
 
 vec3 rgb_to_srgb(vec3 rgb)
 {
-#if 1
     // Correct variant, see GL_ARB_framebuffer_sRGB extension
     float sr = linear_to_nonlinear(rgb.r);
     float sg = linear_to_nonlinear(rgb.g);
     float sb = linear_to_nonlinear(rgb.b);
     return vec3(sr, sg, sb);
-#endif
-#if 0
+}
+#  else // quality < 4
+vec3 rgb_to_srgb(vec3 rgb)
+{
     // Faster variant
-    return pow(rgb, 1.0 / 2.2);
-#endif
-#if 0
-    // Even faster variant, assuming gamma = 2.0
-    return sqrt(rgb);
-#endif
+    return pow(rgb, vec3(1.0 / 2.2)); // vec3() is necessary here
 }
+#  endif // quality < 4
 
 #if defined(mode_onechannel) || defined(mode_even_odd_rows) || defined(mode_even_odd_columns) || defined(mode_checkerboard)
 #  if defined(ghostbust_enabled)
@@ -135,6 +150,8 @@ vec3 adjust_color(vec3 rgb)
 #  define adjust_color(rgb) rgb
 #endif
 
+#endif // quality != 0
+
 vec3 tex_l(vec2 texcoord)
 {
     return adjust_color(texture2D(rgb_l, texcoord + vec2(parallax, 0.0)).rgb);
@@ -187,6 +204,11 @@ void main()
      *    position computations.
      */
     float m = texture2D(mask_tex, gl_TexCoord[2].xy).x;
+#if quality == 0
+    // just subsample (no filtering)
+    vec3 rgbc_l = tex_l(gl_TexCoord[0].xy);
+    vec3 rgbc_r = tex_r(gl_TexCoord[1].xy);
+#else // quality > 0, do adequate filtering
 # if defined(mode_even_odd_rows)
     vec3 rgb0_l = tex_l(gl_TexCoord[0].xy - vec2(0.0, step_y));
     vec3 rgb1_l = tex_l(gl_TexCoord[0].xy);
@@ -219,6 +241,7 @@ void main()
     vec3 rgb4_r = tex_r(gl_TexCoord[1].xy + vec2(0.0, step_y));
     vec3 rgbc_r = (rgb0_r + rgb1_r + 4.0 * rgb2_r + rgb3_r + rgb4_r) / 8.0;
 # endif
+#endif // quality > 0
     vec3 rgbcs_l = blend_subtitle(rgbc_l, sub_l(gl_TexCoord[0].xy));
     vec3 rgbcs_r = blend_subtitle(rgbc_r, sub_r(gl_TexCoord[1].xy));
     srgb = rgb_to_srgb(ghostbust(mix(rgbcs_r, rgbcs_l, m), mix(rgbcs_l, rgbcs_r, m)));
