diff --git a/src/dispatch.cpp b/src/dispatch.cpp
index 442217c..7be206c 100644
--- a/src/dispatch.cpp
+++ b/src/dispatch.cpp
@@ -643,6 +643,10 @@ void dispatch::receive_cmd(const command& cmd)
         _parameters.set_zoom(clamp(s11n::load<float>(p), 0.0f, 1.0f));
         notify_all(notification::zoom);
         break;
+    case command::set_quality:
+        _parameters.set_quality(s11n::load<int>(p));
+        notify_all(notification::quality);
+        break;
     case command::set_loop_mode:
         _parameters.set_loop_mode(static_cast<parameters::loop_mode_t>(s11n::load<int>(p)));
         notify_all(notification::loop_mode);
diff --git a/src/dispatch.h b/src/dispatch.h
index 0574c39..b8ac3ef 100644
--- a/src/dispatch.h
+++ b/src/dispatch.h
@@ -109,6 +109,7 @@ public:
         set_saturation,                 // float (absolute value)
         adjust_zoom,                    // float (relative adjustment)
         set_zoom,                       // float (absolute value)
+        set_quality,                    // int (absolute value)
         set_loop_mode,                  // parameters::loop_mode_t
         set_audio_delay,                // float (absolute value)
         set_subtitle_encoding,          // string (encoding name)
@@ -228,6 +229,7 @@ public:
         hue,
         saturation,
         zoom,
+        quality,
         loop_mode,
         audio_delay,
         subtitle_encoding,
diff --git a/src/gui.cpp b/src/gui.cpp
index 5e66d10..48b5b27 100644
--- a/src/gui.cpp
+++ b/src/gui.cpp
@@ -1262,6 +1262,16 @@ color_dialog::color_dialog(QWidget *parent) : QDialog(parent), _lock(false)
     _s_spinbox->setDecimals(2);
     _s_spinbox->setSingleStep(0.01);
     connect(_s_spinbox, SIGNAL(valueChanged(double)), this, SLOT(s_spinbox_changed(double)));
+    QLabel *q_label = new QLabel(_("Quality:"));
+    _q_slider = new QSlider(Qt::Horizontal);
+    _q_slider->setRange(0, 4);
+    _q_slider->setValue(dispatch::parameters().quality());
+    connect(_q_slider, SIGNAL(valueChanged(int)), this, SLOT(q_changed(int)));
+    _q_spinbox = new QSpinBox();
+    _q_spinbox->setRange(0, 4);
+    _q_spinbox->setSingleStep(1);
+    _q_spinbox->setValue(dispatch::parameters().quality());
+    connect(_q_spinbox, SIGNAL(valueChanged(int)), this, SLOT(q_changed(int)));
 
     QPushButton *ok_button = new QPushButton(_("OK"));
     connect(ok_button, SIGNAL(clicked()), this, SLOT(close()));
@@ -1279,7 +1289,10 @@ color_dialog::color_dialog(QWidget *parent) : QDialog(parent), _lock(false)
     layout->addWidget(s_label, 3, 0);
     layout->addWidget(_s_slider, 3, 1);
     layout->addWidget(_s_spinbox, 3, 2);
-    layout->addWidget(ok_button, 4, 0, 1, 3);
+    layout->addWidget(q_label, 4, 0);
+    layout->addWidget(_q_slider, 4, 1);
+    layout->addWidget(_q_spinbox, 4, 2);
+    layout->addWidget(ok_button, 5, 0, 1, 3);
     setLayout(layout);
 }
 
@@ -1331,6 +1344,12 @@ void color_dialog::s_spinbox_changed(double val)
         send_cmd(command::set_saturation, static_cast<float>(val));
 }
 
+void color_dialog::q_changed(int val)
+{
+    if (!_lock)
+        send_cmd(command::set_quality, val);
+}
+
 void color_dialog::receive_notification(const notification &note)
 {
     switch (note.type)
@@ -1359,6 +1378,12 @@ void color_dialog::receive_notification(const notification &note)
         _s_spinbox->setValue(dispatch::parameters().saturation());
         _lock = false;
         break;
+    case notification::quality:
+        _lock = true;
+        _q_slider->setValue(dispatch::parameters().quality());
+        _q_spinbox->setValue(dispatch::parameters().quality());
+        _lock = false;
+        break;
     default:
         /* not handled */
         break;
@@ -2726,6 +2751,8 @@ main_window::main_window(QSettings *settings) :
             send_cmd(command::set_hue, session_params.hue());
         if (!dispatch::parameters().saturation_is_set() && !session_params.saturation_is_default())
             send_cmd(command::set_saturation, session_params.saturation());
+        if (!dispatch::parameters().quality_is_set() && !session_params.quality_is_default())
+            send_cmd(command::set_quality, session_params.quality());
         if (!dispatch::parameters().crosstalk_r_is_set()
                 && !dispatch::parameters().crosstalk_g_is_set()
                 && !dispatch::parameters().crosstalk_b_is_set()
@@ -2811,6 +2838,11 @@ main_window::main_window(QSettings *settings) :
             send_cmd(command::set_saturation, _settings->value("saturation").toFloat());
             _settings->remove("saturation");
         }
+        if (!dispatch::parameters().quality_is_set() && _settings->contains("quality"))
+        {
+            send_cmd(command::set_quality, _settings->value("quality").toInt());
+            _settings->remove("quality");
+        }
         if (!dispatch::parameters().crosstalk_r_is_set()
                 && !dispatch::parameters().crosstalk_g_is_set()
                 && !dispatch::parameters().crosstalk_b_is_set()
diff --git a/src/gui.h b/src/gui.h
index 948d5ff..f01e5d4 100644
--- a/src/gui.h
+++ b/src/gui.h
@@ -177,6 +177,8 @@ private:
     QSlider *_h_slider;
     QDoubleSpinBox *_s_spinbox;
     QSlider *_s_slider;
+    QSpinBox *_q_spinbox;
+    QSlider *_q_slider;
 
 private slots:
     void c_slider_changed(int val);
@@ -187,6 +189,7 @@ private slots:
     void h_spinbox_changed(double val);
     void s_slider_changed(int val);
     void s_spinbox_changed(double val);
+    void q_changed(int val);
 
 public:
     color_dialog(QWidget *parent);
diff --git a/src/lirc.cpp b/src/lirc.cpp
index b239693..9f93b26 100644
--- a/src/lirc.cpp
+++ b/src/lirc.cpp
@@ -173,6 +173,10 @@ bool lircclient::get_command(const std::string &s, command &c)
     {
         c = command(command::center);
     }
+    else if (std::sscanf(t.c_str(), "quality %f", &parameter) == 1)
+    {
+        c = command(command::set_quality, parameter);
+    }
     else if (std::sscanf(t.c_str(), "zoom %f", &parameter) == 1)
     {
         c = command(command::adjust_zoom, parameter);
diff --git a/src/main.cpp b/src/main.cpp
index 482553b..dd18b0a 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -344,6 +344,8 @@ int main(int argc, char *argv[])
     options.push_back(&benchmark);
     opt::val<int> swap_interval("swap-interval", '\0', opt::optional, 0, 999);
     options.push_back(&swap_interval);
+    opt::val<int> quality("quality", '\0', opt::optional, 0, 4);
+    options.push_back(&quality);
     opt::flag loop("loop", 'l', opt::optional);
     options.push_back(&loop);
 #if HAVE_LIBXNVCTRL
@@ -504,6 +506,7 @@ int main(int argc, char *argv[])
                 + "  --crosstalk=VAL          " + _("Crosstalk leak level (0 to 1).") + '\n'
                 + "                           " + _("Comma-separated values for R,G,B.") + '\n'
                 + "  --ghostbust=VAL          " + _("Amount of ghostbusting to apply (0 to 1).") + '\n'
+                + "  -Q|--quality=VAL         " + _("Video rendering quality (0=fastest to 4=highest).") + '\n'
                 + "  -b|--benchmark           " + _("Benchmark mode (no audio, show fps).") + '\n'
                 + "  --swap-interval=D        " + _("Frame rate divisor for display refresh rate.") + '\n'
                 + "                           " + _("Default is 0 for benchmark mode, 1 otherwise.") + '\n'
@@ -658,6 +661,8 @@ int main(int argc, char *argv[])
         controller::send_cmd(command::set_fullscreen_flop_right, fullscreen_flop_right.value());
     if (zoom.is_set())
         controller::send_cmd(command::set_zoom, zoom.value());
+    if (quality.is_set())
+        controller::send_cmd(command::set_quality, quality.value());
     if (loop.is_set())
         controller::send_cmd(command::set_loop_mode, loop.value() ? parameters::loop_current : parameters::no_loop);
     if (audio_delay.is_set())
diff --git a/src/media_data.cpp b/src/media_data.cpp
index 371b29d..3578c8a 100644
--- a/src/media_data.cpp
+++ b/src/media_data.cpp
@@ -98,6 +98,7 @@ parameters::parameters()
     unset_hue();
     unset_saturation();
     unset_zoom();
+    unset_quality();
     unset_loop_mode();
     unset_audio_delay();
     unset_subtitle_encoding();
@@ -150,6 +151,7 @@ const float parameters::_brightness_default = 0.0f;
 const float parameters::_hue_default = 0.0f;
 const float parameters::_saturation_default = 0.0f;
 const float parameters::_zoom_default = 0.0f;
+const int parameters::_quality_default = 4;
 const parameters::loop_mode_t parameters::_loop_mode_default = no_loop;
 const int64_t parameters::_audio_delay_default = 0;
 const std::string parameters::_subtitle_encoding_default = "";
@@ -484,6 +486,8 @@ void parameters::save(std::ostream &os) const
     s11n::save(os, _saturation_set);
     s11n::save(os, _zoom);
     s11n::save(os, _zoom_set);
+    s11n::save(os, _quality);
+    s11n::save(os, _quality_set);
     s11n::save(os, static_cast<int>(_loop_mode));
     s11n::save(os, _loop_mode_set);
     s11n::save(os, _audio_delay);
@@ -583,6 +587,8 @@ void parameters::load(std::istream &is)
     s11n::load(is, _saturation_set);
     s11n::load(is, _zoom);
     s11n::load(is, _zoom_set);
+    s11n::load(is, _quality);
+    s11n::load(is, _quality_set);
     s11n::load(is, x); _loop_mode = static_cast<loop_mode_t>(x);
     s11n::load(is, _loop_mode_set);
     s11n::load(is, _audio_delay);
@@ -672,6 +678,8 @@ std::string parameters::save_session_parameters() const
         s11n::save(oss, "saturation", saturation());
     if (!zoom_is_default())
         s11n::save(oss, "zoom", zoom());
+    if (!quality_is_default())
+        s11n::save(oss, "quality", quality());
     if (!loop_mode_is_default())
         s11n::save(oss, "loop_mode", loop_mode_to_string(loop_mode()));
     if (!audio_delay_is_default())
@@ -756,6 +764,9 @@ void parameters::load_session_parameters(const std::string &s)
         } else if (name == "zoom") {
             s11n::load(value, _zoom);
             _zoom_set = true;
+        } else if (name == "quality") {
+            s11n::load(value, _quality);
+            _quality_set = true;
         } else if (name == "loop_mode") {
             std::string s;
             s11n::load(value, s);
diff --git a/src/media_data.h b/src/media_data.h
index e5be194..49fecc7 100644
--- a/src/media_data.h
+++ b/src/media_data.h
@@ -176,6 +176,7 @@ public:
     PARAMETER(float, hue)                     // Hue adjustment, -1 .. +1
     PARAMETER(float, saturation)              // Saturation adjustment, -1 .. +1
     PARAMETER(float, zoom)                    // Zoom, 0 = off (show full video width) .. 1 = full (use full screen height)
+    PARAMETER(int, quality)                   // Video rendering quality, 0 .. 4
     PARAMETER(loop_mode_t, loop_mode)         // Current loop behaviour.
     PARAMETER(int64_t, audio_delay)           // Audio delay in microseconds
     PARAMETER(std::string, subtitle_encoding) // Subtitle encoding, empty means keep default
diff --git a/src/video_output.cpp b/src/video_output.cpp
index 82b6837..1a942e2 100644
--- a/src/video_output.cpp
+++ b/src/video_output.cpp
@@ -948,13 +948,18 @@ void video_output::color_init(const video_frame &frame)
             }
         }
     }
+    std::string quality_str = str::from(_params.quality());
     // XXX: Hack: work around broken SRGB texture implementations
     if (!srgb8_textures_are_color_renderable() || std::getenv("SRGB_TEXTURES_ARE_BROKEN"))
     {
         msg::dbg("Avoiding broken SRGB texture implementation.");
         storage_str = "storage_linear_rgb";
     }
-
+    if (_params.quality() == 0)
+    {
+        // use RGB8 textures as if they were sRGB, without linearization/delinearization
+        storage_str = "storage_linear_srgb";
+    }
     std::string color_fs_src(VIDEO_OUTPUT_COLOR_FS_GLSL_STR);
     str::replace(color_fs_src, "$layout", layout_str);
     str::replace(color_fs_src, "$color_space", color_space_str);
@@ -962,7 +967,11 @@ void video_output::color_init(const video_frame &frame)
     str::replace(color_fs_src, "$chroma_offset_x", chroma_offset_x_str);
     str::replace(color_fs_src, "$chroma_offset_y", chroma_offset_y_str);
     str::replace(color_fs_src, "$storage", storage_str);
+    str::replace(color_fs_src, "$quality", quality_str);
     _color_prg = xglCreateProgram("video_output_color", "", color_fs_src);
+    _color_internalformat = storage_str == "storage_srgb" ? GL_SRGB8 :
+                            storage_str == "storage_linear_srgb" ? GL_RGB8 :
+                            GL_RGB16;
     xglLinkProgram("video_output_color", _color_prg);
     for (int i = 0; i < (frame.stereo_layout == parameters::layout_mono ? 1 : 2); i++)
     {
@@ -972,8 +981,7 @@ void video_output::color_init(const video_frame &frame)
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);
-        glTexImage2D(GL_TEXTURE_2D, 0,
-                storage_str == "storage_srgb" ? GL_SRGB8 : GL_RGB16,
+        glTexImage2D(GL_TEXTURE_2D, 0, _color_internalformat,
                 frame.width, frame.height, 0, GL_BGRA, GL_UNSIGNED_INT_8_8_8_8_REV, NULL);
     }
     xglCheckError(HERE);
@@ -1009,7 +1017,8 @@ bool video_output::color_is_compatible(const video_frame &current_frame)
             && _color_last_frame.color_space == current_frame.color_space
             && _color_last_frame.value_range == current_frame.value_range
             && _color_last_frame.chroma_location == current_frame.chroma_location
-            && _color_last_frame.stereo_layout == current_frame.stereo_layout);
+            && _color_last_frame.stereo_layout == current_frame.stereo_layout
+            && _render_last_params.quality() == _params.quality());
 }
 
 void video_output::render_init()
@@ -1034,8 +1043,16 @@ void video_output::render_init()
             : _params.stereo_mode() == parameters::mode_red_green_monochrome ? "mode_red_green_monochrome"
             : _params.stereo_mode() == parameters::mode_red_blue_monochrome ? "mode_red_blue_monochrome"
             : "mode_onechannel");
+    std::string internalformat_str = (
+        _color_internalformat == GL_SRGB8 ? "internalformat_srgb8"
+        : _color_internalformat == GL_RGB8 ? "internalformat_rgb8"
+        : "internalformat_rgb16");
+    std::string quality_str = str::from(_params.quality());
     std::string render_fs_src(VIDEO_OUTPUT_RENDER_FS_GLSL_STR);
     str::replace(render_fs_src, "$mode", mode_str);
+    str::replace(render_fs_src, "$internalformat", internalformat_str);
+    
+    str::replace(render_fs_src, "$quality", quality_str);
     _render_prg = xglCreateProgram("video_output_render", "", render_fs_src);
     xglLinkProgram("video_output_render", _render_prg);
     uint32_t dummy_texture = 0;
@@ -1096,7 +1113,8 @@ void video_output::render_deinit()
 
 bool video_output::render_is_compatible()
 {
-    return (_render_last_params.stereo_mode() == _params.stereo_mode());
+    return (_render_last_params.stereo_mode() == _params.stereo_mode()
+            && _render_last_params.quality() == _params.quality());
 }
 
 void video_output::activate_next_frame()
diff --git a/src/video_output.h b/src/video_output.h
index a1244b8..907c58b 100644
--- a/src/video_output.h
+++ b/src/video_output.h
@@ -69,6 +69,7 @@ private:
     GLuint _color_prg;                  // color space transformation, color adjustment
     GLuint _color_fbo;                  // framebuffer object to render into the sRGB texture
     GLuint _color_tex[2];               // output: SRGB8 or linear RGB16 texture
+    GLint _color_internalformat;        // the internalformat of textures
     // Step 3: rendering
     parameters _render_last_params;     // last params for this step; used for reinitialization check
     GLuint _render_prg;                 // reads sRGB texture, renders according to _params[_active_index]
diff --git a/src/video_output_color.fs.glsl b/src/video_output_color.fs.glsl
index 16403e8..078ca27 100644
--- a/src/video_output_color.fs.glsl
+++ b/src/video_output_color.fs.glsl
@@ -42,8 +42,11 @@
 
 // storage_srgb
 // storage_linear_rgb
+// storage_linear_srgb
 #define $storage
 
+#define quality $quality
+
 #if defined(layout_yuv_p)
 uniform sampler2D y_tex;
 uniform sampler2D u_tex;
@@ -156,7 +159,7 @@ void main()
     vec3 yuv = get_yuv(gl_TexCoord[0].xy);
     vec3 adjusted_yuv = adjust_yuv(yuv);
     vec3 srgb = yuv_to_srgb(adjusted_yuv);
-#if defined(storage_srgb)
+#if defined(storage_srgb) || defined(storage_linear_srgb)
     gl_FragColor = vec4(srgb, 1.0);
 #else
     vec3 rgb = srgb_to_rgb(srgb);
diff --git a/src/video_output_render.fs.glsl b/src/video_output_render.fs.glsl
index 1cad7de..148bfc8 100644
--- a/src/video_output_render.fs.glsl
+++ b/src/video_output_render.fs.glsl
@@ -41,6 +41,18 @@
 // mode_checkerboard
 #define $mode
 
+// internalformat_srgb8
+// internalformat_rgb8
+// internalformat_rgb16
+#define $internalformat
+
+// 0: no filtering in interlaced/checkerboard modes, and sRGB is stored as RGB (no linearization/delinearization)
+// 1: no filtering in interlaced/checkerboard modes
+// 2: fast delinearization
+// 3: fast delinearization
+// 3: slower but exact delinearization
+#define quality $quality
+
 uniform sampler2D rgb_l;
 uniform sampler2D rgb_r;
 uniform float parallax;
@@ -70,6 +82,13 @@ float srgb_to_lum(vec3 srgb)
 }
 #endif
 
+#if defined(internalformat_rgb8)
+#if quality != 0
+#error "unexpected quality value"
+#endif
+// sRGB texture stored into RGB: no delinearization is necessary
+#define rgb_to_srgb(rgb) rgb
+#else
 float linear_to_nonlinear(float x)
 {
     return (x <= 0.0031308 ? (x * 12.92) : (1.055 * pow(x, 1.0 / 2.4) - 0.055));
@@ -77,22 +96,22 @@ float linear_to_nonlinear(float x)
 
 vec3 rgb_to_srgb(vec3 rgb)
 {
-#if 1
+#if quality == 4
     // Correct variant, see GL_ARB_framebuffer_sRGB extension
     float sr = linear_to_nonlinear(rgb.r);
     float sg = linear_to_nonlinear(rgb.g);
     float sb = linear_to_nonlinear(rgb.b);
     return vec3(sr, sg, sb);
-#endif
-#if 0
+#else
     // Faster variant
-    return pow(rgb, 1.0 / 2.2);
+    return pow(rgb, vec3(1.0 / 2.2));
 #endif
 #if 0
     // Even faster variant, assuming gamma = 2.0
     return sqrt(rgb);
 #endif
 }
+#endif
 
 #if defined(mode_onechannel) || defined(mode_even_odd_rows) || defined(mode_even_odd_columns) || defined(mode_checkerboard)
 vec3 ghostbust(vec3 original, vec3 other)
@@ -152,6 +171,11 @@ void main()
      *    position computations.
      */
     float m = texture2D(mask_tex, gl_TexCoord[2].xy).x;
+#if quality == 0
+    // just subsample (no filtering)
+    vec3 rgbc_l = tex_l(gl_TexCoord[0].xy);
+    vec3 rgbc_r = tex_r(gl_TexCoord[1].xy);
+#else // quality > 0, do adequate filtering
 # if defined(mode_even_odd_rows)
     vec3 rgb0_l = tex_l(gl_TexCoord[0].xy - vec2(0.0, step_y));
     vec3 rgb1_l = tex_l(gl_TexCoord[0].xy);
@@ -184,6 +208,7 @@ void main()
     vec3 rgb4_r = tex_r(gl_TexCoord[1].xy + vec2(0.0, step_y));
     vec3 rgbc_r = (rgb0_r + rgb1_r + 4.0 * rgb2_r + rgb3_r + rgb4_r) / 8.0;
 # endif
+#endif // quality > 0
     vec3 rgbcs_l = blend_subtitle(rgbc_l, sub_l(gl_TexCoord[0].xy));
     vec3 rgbcs_r = blend_subtitle(rgbc_r, sub_r(gl_TexCoord[1].xy));
     srgb = rgb_to_srgb(ghostbust(mix(rgbcs_r, rgbcs_l, m), mix(rgbcs_l, rgbcs_r, m)));
