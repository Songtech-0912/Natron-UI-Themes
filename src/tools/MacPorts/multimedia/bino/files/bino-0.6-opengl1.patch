diff --git a/src/video_output_opengl.cpp b/src/video_output_opengl.cpp
index 3a8d022..ca09f8a 100644
--- a/src/video_output_opengl.cpp
+++ b/src/video_output_opengl.cpp
@@ -177,7 +177,7 @@ void video_output_opengl::initialize(bool have_pixel_buffer_object, bool have_te
                 std::string("$mode=") + mode_str + ", $input=" + input_str);
         _prg = xgl::CreateProgram("video_output", "", "", fs_src);
         xgl::LinkProgram("video_output", _prg);
-        glUseProgram(_prg);
+        glUseProgramObjectARB(_prg);
         if (_mode == even_odd_rows || _mode == even_odd_columns || _mode == checkerboard)
         {
             GLubyte even_odd_rows_mask[4] = { 0xff, 0xff, 0x00, 0x00 };
@@ -198,9 +198,9 @@ void video_output_opengl::initialize(bool have_pixel_buffer_object, bool have_te
         }
         if (frame_format() == decoder::frame_format_yuv420p)
         {
-            glUniform1i(glGetUniformLocation(_prg, "y_l"), 0);
-            glUniform1i(glGetUniformLocation(_prg, "u_l"), 1);
-            glUniform1i(glGetUniformLocation(_prg, "v_l"), 2);
+            glUniform1iARB(glGetUniformLocationARB(_prg, "y_l"), 0);
+            glUniform1iARB(glGetUniformLocationARB(_prg, "u_l"), 1);
+            glUniform1iARB(glGetUniformLocationARB(_prg, "v_l"), 2);
             if (_mode == even_odd_rows
                     || _mode == even_odd_columns
                     || _mode == checkerboard
@@ -209,18 +209,18 @@ void video_output_opengl::initialize(bool have_pixel_buffer_object, bool have_te
                     || _mode == anaglyph_red_cyan_half_color
                     || _mode == anaglyph_red_cyan_dubois)
             {
-                glUniform1i(glGetUniformLocation(_prg, "y_r"), 3);
-                glUniform1i(glGetUniformLocation(_prg, "u_r"), 4);
-                glUniform1i(glGetUniformLocation(_prg, "v_r"), 5);
+                glUniform1iARB(glGetUniformLocationARB(_prg, "y_r"), 3);
+                glUniform1iARB(glGetUniformLocationARB(_prg, "u_r"), 4);
+                glUniform1iARB(glGetUniformLocationARB(_prg, "v_r"), 5);
             }
             if (_mode == even_odd_rows || _mode == even_odd_columns || _mode == checkerboard)
             {
-                glUniform1i(glGetUniformLocation(_prg, "mask_tex"), 6);
+                glUniform1iARB(glGetUniformLocationARB(_prg, "mask_tex"), 6);
             }
         }
         else
         {
-            glUniform1i(glGetUniformLocation(_prg, "rgb_l"), 0);
+            glUniform1iARB(glGetUniformLocationARB(_prg, "rgb_l"), 0);
             if (_mode == even_odd_rows
                     || _mode == even_odd_columns
                     || _mode == checkerboard
@@ -229,11 +229,11 @@ void video_output_opengl::initialize(bool have_pixel_buffer_object, bool have_te
                     || _mode == anaglyph_red_cyan_half_color
                     || _mode == anaglyph_red_cyan_dubois)
             {
-                glUniform1i(glGetUniformLocation(_prg, "rgb_r"), 1);
+                glUniform1iARB(glGetUniformLocationARB(_prg, "rgb_r"), 1);
             }
             if (_mode == even_odd_rows || _mode == even_odd_columns || _mode == checkerboard)
             {
-                glUniform1i(glGetUniformLocation(_prg, "mask_tex"), 2);
+                glUniform1iARB(glGetUniformLocationARB(_prg, "mask_tex"), 2);
             }
         }
     }
@@ -535,15 +535,15 @@ void video_output_opengl::display(enum video_output::mode mode, float x, float y
 
     if (_prg != 0)
     {
-        glUniform1f(glGetUniformLocation(_prg, "contrast"), _state.contrast);
-        glUniform1f(glGetUniformLocation(_prg, "brightness"), _state.brightness);
-        glUniform1f(glGetUniformLocation(_prg, "saturation"), _state.saturation);
-        glUniform1f(glGetUniformLocation(_prg, "cos_hue"), std::cos(_state.hue * M_PI));
-        glUniform1f(glGetUniformLocation(_prg, "sin_hue"), std::sin(_state.hue * M_PI));
+        glUniform1fARB(glGetUniformLocationARB(_prg, "contrast"), _state.contrast);
+        glUniform1fARB(glGetUniformLocationARB(_prg, "brightness"), _state.brightness);
+        glUniform1fARB(glGetUniformLocationARB(_prg, "saturation"), _state.saturation);
+        glUniform1fARB(glGetUniformLocationARB(_prg, "cos_hue"), std::cos(_state.hue * M_PI));
+        glUniform1fARB(glGetUniformLocationARB(_prg, "sin_hue"), std::sin(_state.hue * M_PI));
         if (mode == even_odd_rows || mode == even_odd_columns || mode == checkerboard)
         {
-            glUniform1f(glGetUniformLocation(_prg, "step_x"), _tex_max_x / static_cast<float>(viewport[2]));
-            glUniform1f(glGetUniformLocation(_prg, "step_y"), _tex_max_y / static_cast<float>(viewport[3]));
+            glUniform1fARB(glGetUniformLocationARB(_prg, "step_x"), _tex_max_x / static_cast<float>(viewport[2]));
+            glUniform1fARB(glGetUniformLocationARB(_prg, "step_y"), _tex_max_y / static_cast<float>(viewport[3]));
         }
     }
 
diff --git a/src/xgl.cpp b/src/xgl.cpp
index c827e92..93381c2 100644
--- a/src/xgl.cpp
+++ b/src/xgl.cpp
@@ -59,7 +59,7 @@ void xgl::PushProgram(std::vector<unsigned char> &stack)
 void xgl::PopProgram(std::vector<unsigned char> &stack)
 {
     const GLint *prg = static_cast<const GLint *>(xglTop(stack, sizeof(GLint)));
-    glUseProgram(*prg);
+    glUseProgramObjectARB(*prg);
     xglPop(stack, sizeof(GLint));
 }
 
@@ -278,22 +278,22 @@ std::string xgl::ShaderSourcePrep(const std::string &src, const std::string &def
 GLuint xgl::CompileShader(const std::string &name, GLenum type, const std::string &src)
 {
     msg::dbg("compiling %s shader %s",
-            type == GL_VERTEX_SHADER ? "vertex" : type == GL_GEOMETRY_SHADER_EXT ? "geometry" : "fragment",
+            type == GL_VERTEX_SHADER_ARB ? "vertex" : type == GL_GEOMETRY_SHADER_EXT ? "geometry" : "fragment",
             name.c_str());
 
-    GLuint shader = glCreateShader(type);
+    GLuint shader = glCreateShaderObjectARB(type);
     const GLchar *glsrc = src.c_str();
-    glShaderSource(shader, 1, &glsrc, NULL);
-    glCompileShader(shader);
+    glShaderSourceARB(shader, 1, &glsrc, NULL);
+    glCompileShaderARB(shader);
 
     std::string log;
     GLint e, l;
-    glGetShaderiv(shader, GL_COMPILE_STATUS, &e);
-    glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &l);
+    glGetObjectParameterivARB(shader, GL_OBJECT_COMPILE_STATUS_ARB, &e);
+    glGetObjectParameterivARB(shader, GL_OBJECT_INFO_LOG_LENGTH_ARB, &l);
     if (l > 0)
     {
         char *tmplog = new char[l];
-        glGetShaderInfoLog(shader, l, NULL, tmplog);
+        glGetInfoLogARB(shader, l, NULL, tmplog);
         xglKillCrlf(tmplog);
         log = std::string(tmplog);
         delete[] tmplog;
@@ -306,14 +306,14 @@ GLuint xgl::CompileShader(const std::string &name, GLenum type, const std::strin
     if (e == GL_TRUE && log.length() > 0)
     {
         msg::wrn("OpenGL %s shader '%s': compiler warning:",
-                type == GL_VERTEX_SHADER ? "vertex" : type == GL_GEOMETRY_SHADER_EXT ? "geometry" : "fragment",
+                type == GL_VERTEX_SHADER_ARB ? "vertex" : type == GL_GEOMETRY_SHADER_EXT ? "geometry" : "fragment",
                 name.c_str());
         msg::wrn_txt("%s", log.c_str());
     }
     else if (e != GL_TRUE)
     {
         std::string when = str::asprintf("OpenGL %s shader '%s': compilation failed",
-                type == GL_VERTEX_SHADER ? "vertex" : type == GL_GEOMETRY_SHADER_EXT ? "geometry" : "fragment",
+                type == GL_VERTEX_SHADER_ARB ? "vertex" : type == GL_GEOMETRY_SHADER_EXT ? "geometry" : "fragment",
                 name.c_str());
         std::string what = str::asprintf("\n%s", log.length() > 0 ? log.c_str() : "unknown error");
         throw exc(when + ": " + what);
@@ -325,13 +325,13 @@ GLuint xgl::CreateProgram(GLuint vshader, GLuint gshader, GLuint fshader)
 {
     assert(vshader != 0 || gshader != 0 || fshader != 0);
 
-    GLuint program = glCreateProgram();
+    GLuint program = glCreateProgramObjectARB();
     if (vshader != 0)
-        glAttachShader(program, vshader);
+        glAttachObjectARB(program, vshader);
     if (gshader != 0)
-        glAttachShader(program, gshader);
+        glAttachObjectARB(program, gshader);
     if (fshader != 0)
-        glAttachShader(program, fshader);
+        glAttachObjectARB(program, fshader);
 
     return program;
 }
@@ -342,11 +342,11 @@ GLuint xgl::CreateProgram(const std::string &name,
     GLuint vshader = 0, gshader = 0, fshader = 0;
 
     if (vshader_src.length() > 0)
-        vshader = xgl::CompileShader(name, GL_VERTEX_SHADER, vshader_src);
+        vshader = xgl::CompileShader(name, GL_VERTEX_SHADER_ARB, vshader_src);
     if (gshader_src.length() > 0)
         gshader = xgl::CompileShader(name, GL_GEOMETRY_SHADER_EXT, gshader_src);
     if (fshader_src.length() > 0)
-        fshader = xgl::CompileShader(name, GL_FRAGMENT_SHADER, fshader_src);
+        fshader = xgl::CompileShader(name, GL_FRAGMENT_SHADER_ARB, fshader_src);
 
     return xgl::CreateProgram(vshader, gshader, fshader);
 }
@@ -355,16 +355,16 @@ void xgl::LinkProgram(const std::string &name, const GLuint prg)
 {
     msg::dbg("linking OpenGL program %s", name.c_str());
 
-    glLinkProgram(prg);
+    glLinkProgramARB(prg);
 
     std::string log;
     GLint e, l;
-    glGetProgramiv(prg, GL_LINK_STATUS, &e);
-    glGetProgramiv(prg, GL_INFO_LOG_LENGTH, &l);
+    glGetObjectParameterivARB(prg, GL_OBJECT_LINK_STATUS_ARB, &e);
+    glGetObjectParameterivARB(prg, GL_OBJECT_INFO_LOG_LENGTH_ARB, &l);
     if (l > 0)
     {
         char *tmplog = new char[l];
-        glGetProgramInfoLog(prg, l, NULL, tmplog);
+        glGetInfoLogARB(prg, l, NULL, tmplog);
         xglKillCrlf(tmplog);
         log = std::string(tmplog);
         delete[] tmplog;
@@ -389,16 +389,16 @@ void xgl::LinkProgram(const std::string &name, const GLuint prg)
 
 void xgl::DeleteProgram(GLuint program)
 {
-    if (glIsProgram(program))
+    if (glIsProgramARB(program))
     {
         GLint shader_count;
-        glGetProgramiv(program, GL_ATTACHED_SHADERS, &shader_count);
+        glGetProgramivARB(program, GL_OBJECT_ATTACHED_OBJECTS_ARB, &shader_count);
         GLuint *shaders = new GLuint[shader_count];
-        glGetAttachedShaders(program, shader_count, NULL, shaders);
+        glGetAttachedObjectsARB(program, shader_count, NULL, shaders);
         for (int i = 0; i < shader_count; i++)
-            glDeleteShader(shaders[i]);
+            glDeleteObjectARB(shaders[i]);
         delete[] shaders;
-        glDeleteProgram(program);
+        glDeleteObjectARB(program);
     }
 }
 
